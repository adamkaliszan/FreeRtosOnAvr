   1               		.file	"sensors_task.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 271               	.global	sensorsTaskInit
 273               	sensorsTaskInit:
 274               		.stabd	46,0,0
   1:sensors_task.c **** /*********************************************
   2:sensors_task.c ****  * vim:sw=8:ts=8:si:et
   3:sensors_task.c ****  * To use the above modeline in vim you must have "set modeline" in your .vimrc
   4:sensors_task.c ****  * Author: Guido Socher
   5:sensors_task.c ****  * Copyright: GPL V2
   6:sensors_task.c ****  * See http://www.gnu.org/licenses/gpl.html
   7:sensors_task.c ****  *
   8:sensors_task.c ****  * Ethernet remote device and sensor
   9:sensors_task.c ****  * UDP and HTTP interface
  10:sensors_task.c ****         url looks like this http://baseurl/password/command
  11:sensors_task.c ****         or http://baseurl/password/
  12:sensors_task.c ****  *
  13:sensors_task.c ****  * Chip type           : Atmega88 or Atmega168 or Atmega328 with ENC28J60
  14:sensors_task.c ****  * Note: there is a version number in the text. Search for tuxgraphics
  15:sensors_task.c ****  *********************************************/
  16:sensors_task.c **** #include <avr/io.h>
  17:sensors_task.c **** #include <stdlib.h>
  18:sensors_task.c **** #include <string.h>
  19:sensors_task.c **** #include <stdio.h>
  20:sensors_task.c **** #include <avr/pgmspace.h>
  21:sensors_task.c **** #include "sensors_task.h"
  22:sensors_task.c **** #include "memory_x.h"
  23:sensors_task.c **** #include "main.h"
  24:sensors_task.c **** #include "Rs485_prot.h"
  25:sensors_task.c **** #include "protocol1.h"
  26:sensors_task.c **** #include "mpc23s17.h"
  27:sensors_task.c **** 
  28:sensors_task.c **** 
  29:sensors_task.c **** 
  30:sensors_task.c **** void sensorsTaskInit(void)
  31:sensors_task.c **** {
 276               	.LM0:
 277               	.LFBB1:
 278               	/* prologue: function */
 279               	/* frame size = 0 */
 280               	/* stack size = 0 */
 281               	.L__stack_usage = 0
  32:sensors_task.c ****   LockersMemInit();
 283               	.LM1:
 284 0000 0E94 0000 		call LockersMemInit
  33:sensors_task.c ****   rollersMemInit();
 286               	.LM2:
 287 0004 0C94 0000 		jmp rollersMemInit
 289               	.Lscope1:
 291               		.stabd	78,0,0
 294               	.global	sensorsTask
 296               	sensorsTask:
 297               		.stabd	46,0,0
  34:sensors_task.c **** }
  35:sensors_task.c **** 
  36:sensors_task.c **** void sensorsTask(void* pvParameters)
  37:sensors_task.c **** {
 299               	.LM3:
 300               	.LFBB2:
 301               	/* prologue: function */
 302               	/* frame size = 0 */
 303               	/* stack size = 0 */
 304               	.L__stack_usage = 0
  38:sensors_task.c ****   (void) pvParameters;
  39:sensors_task.c ****   uint8_t addr = 255;
  40:sensors_task.c **** //  uint8_t i;
  41:sensors_task.c **** 
  42:sensors_task.c ****   MPC23s17SetDirA(0x00, 0);
 306               	.LM4:
 307 0008 60E0      		ldi r22,0
 308 000a 80E0      		ldi r24,0
 309 000c 0E94 0000 		call MPC23s17SetDirA
  43:sensors_task.c **** 
  44:sensors_task.c ****   MPC23s17SetDirB(0x00, 0);
 311               	.LM5:
 312 0010 60E0      		ldi r22,0
 313 0012 80E0      		ldi r24,0
 314 0014 0E94 0000 		call MPC23s17SetDirB
 315               	.LBB2:
  45:sensors_task.c **** 
  46:sensors_task.c ****   for( ; ; )
  47:sensors_task.c ****   {
  48:sensors_task.c ****     uint16_t tmp;
  49:sensors_task.c ****     //Read power suply voltage
  50:sensors_task.c ****     tmp = MCP3008_getSampleSingle(0);
  51:sensors_task.c ****     voltage = (uint8_t)(tmp>>5);
  52:sensors_task.c ****     vTaskDelay(10);
  53:sensors_task.c **** 
  54:sensors_task.c ****     //Read temperature inside chasis
  55:sensors_task.c ****     tmp = MCP3008_getSampleSingle(1);
  56:sensors_task.c ****     tmp *=10;
 317               	.LM6:
 318 0018 DAE0      		ldi r29,lo8(10)
  57:sensors_task.c ****     temperature = (uint8_t)(tmp / 24);
 320               	.LM7:
 321 001a 08E1      		ldi r16,lo8(24)
 322 001c 10E0      		ldi r17,0
 323               	.L4:
  50:sensors_task.c ****     voltage = (uint8_t)(tmp>>5);
 325               	.LM8:
 326 001e 80E0      		ldi r24,0
 327 0020 0E94 0000 		call MCP3008_getSampleSingle
  51:sensors_task.c ****     vTaskDelay(10);
 329               	.LM9:
 330 0024 25E0      		ldi r18,5
 331               		1:
 332 0026 9695      		lsr r25
 333 0028 8795      		ror r24
 334 002a 2A95      		dec r18
 335 002c 01F4      		brne 1b
 336 002e 8093 0000 		sts voltage,r24
  52:sensors_task.c **** 
 338               	.LM10:
 339 0032 8AE0      		ldi r24,lo8(10)
 340 0034 90E0      		ldi r25,0
 341 0036 0E94 0000 		call vTaskDelay
  55:sensors_task.c ****     tmp *=10;
 343               	.LM11:
 344 003a 81E0      		ldi r24,lo8(1)
 345 003c 0E94 0000 		call MCP3008_getSampleSingle
  56:sensors_task.c ****     temperature = (uint8_t)(tmp / 24);
 347               	.LM12:
 348 0040 9C01      		movw r18,r24
 349 0042 D29F      		mul r29,r18
 350 0044 C001      		movw r24,r0
 351 0046 D39F      		mul r29,r19
 352 0048 900D      		add r25,r0
 353 004a 1124      		clr __zero_reg__
 355               	.LM13:
 356 004c B801      		movw r22,r16
 357 004e 0E94 0000 		call __udivmodhi4
 358 0052 6093 0000 		sts temperature,r22
  58:sensors_task.c ****     vTaskDelay(10);
 360               	.LM14:
 361 0056 8AE0      		ldi r24,lo8(10)
 362 0058 90E0      		ldi r25,0
 363 005a 0E94 0000 		call vTaskDelay
  59:sensors_task.c **** 
  60:sensors_task.c ****     //read lock
  61:sensors_task.c ****     checkLockerSensors();
 365               	.LM15:
 366 005e 0E94 0000 		call checkLockerSensors
  62:sensors_task.c **** 
  63:sensors_task.c ****     for (addr = FIRST_ROLLER_DRIVER_ADDR; addr <= LAST_ROLLER_DRIVER_ADDR; addr++)
 368               	.LM16:
 369 0062 C1E0      		ldi r28,lo8(1)
 370               	.L3:
  64:sensors_task.c ****     {
  65:sensors_task.c ****       rs485rollerHello(addr);
 372               	.LM17:
 373 0064 8C2F      		mov r24,r28
 374 0066 0E94 0000 		call rs485rollerHello
  66:sensors_task.c ****       vTaskDelay(10);
 376               	.LM18:
 377 006a 8AE0      		ldi r24,lo8(10)
 378 006c 90E0      		ldi r25,0
 379 006e 0E94 0000 		call vTaskDelay
  63:sensors_task.c ****     {
 381               	.LM19:
 382 0072 CF5F      		subi r28,lo8(-(1))
 383 0074 C032      		cpi r28,lo8(32)
 384 0076 01F4      		brne .L3
 385 0078 00C0      		rjmp .L4
 386               	.LBE2:
 391               	.Lscope2:
 393               		.stabd	78,0,0
 394               		.comm	czasRtc,7,1
 395               		.comm	sockets,2,1
 396               		.comm	tcpDebugLevel,1,1
 397               		.comm	tcpDebugStream,2,1
 398               		.comm	IpMyConfig,15,1
 399               		.comm	udpDbgLevel,1,1
 400               		.comm	udpDbgStream,2,1
 401               		.comm	udpSocket,2,1
 402               		.comm	icmpDebugLevel,1,1
 403               		.comm	icmpDebug,2,1
 404               		.comm	arpDebugLevel,1,1
 405               		.comm	arpDebug,2,1
 406               		.comm	nicState,14,1
 407               		.comm	xSemaphoreRs485,2,1
 408               		.comm	lockSensors,2,1
 409               		.comm	portB,1,1
 410               		.comm	portA,1,1
 411               		.comm	xSemaphoreSpiSS,2,1
 412               		.comm	rollers,2,1
 413               		.comm	wwwport,1,1
 414               		.comm	klastry,128,1
 437               	.Letext0:
 438               		.ident	"GCC: (GNU) 4.9.2"
 439               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 sensors_task.c
     /tmp/cc4MDYtp.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc4MDYtp.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc4MDYtp.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc4MDYtp.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cc4MDYtp.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc4MDYtp.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc4MDYtp.s:273    .text:0000000000000000 sensorsTaskInit
     /tmp/cc4MDYtp.s:296    .text:0000000000000008 sensorsTask
                            *COM*:0000000000000007 czasRtc
                            *COM*:0000000000000002 sockets
                            *COM*:0000000000000001 tcpDebugLevel
                            *COM*:0000000000000002 tcpDebugStream
                            *COM*:000000000000000f IpMyConfig
                            *COM*:0000000000000001 udpDbgLevel
                            *COM*:0000000000000002 udpDbgStream
                            *COM*:0000000000000002 udpSocket
                            *COM*:0000000000000001 icmpDebugLevel
                            *COM*:0000000000000002 icmpDebug
                            *COM*:0000000000000001 arpDebugLevel
                            *COM*:0000000000000002 arpDebug
                            *COM*:000000000000000e nicState
                            *COM*:0000000000000002 xSemaphoreRs485
                            *COM*:0000000000000002 lockSensors
                            *COM*:0000000000000001 portB
                            *COM*:0000000000000001 portA
                            *COM*:0000000000000002 xSemaphoreSpiSS
                            *COM*:0000000000000002 rollers
                            *COM*:0000000000000001 wwwport
                            *COM*:0000000000000080 klastry

UNDEFINED SYMBOLS
LockersMemInit
rollersMemInit
MPC23s17SetDirA
MPC23s17SetDirB
MCP3008_getSampleSingle
voltage
vTaskDelay
__udivmodhi4
temperature
checkLockerSensors
rs485rollerHello
__do_clear_bss
