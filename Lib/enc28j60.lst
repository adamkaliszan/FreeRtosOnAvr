   1               		.file	"enc28j60.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 269               		.weak	spiEnableEnc28j60
 271               	spiEnableEnc28j60:
 272               		.stabd	46,0,0
   1:../../../../Lib/enc28j60.c **** /*********************************************
   2:../../../../Lib/enc28j60.c ****  * vim:sw=8:ts=8:si:et
   3:../../../../Lib/enc28j60.c ****  * To use the above modeline in vim you must have "set modeline" in your .vimrc
   4:../../../../Lib/enc28j60.c ****  * Author: Guido Socher
   5:../../../../Lib/enc28j60.c ****  * Copyright: GPL V2
   6:../../../../Lib/enc28j60.c ****  * http://www.gnu.org/licenses/gpl.html
   7:../../../../Lib/enc28j60.c ****  *
   8:../../../../Lib/enc28j60.c ****  * Based on the enc28j60.c file from the AVRlib library by Pascal Stang
   9:../../../../Lib/enc28j60.c ****  * For AVRlib See http://www.procyonengineering.com/
  10:../../../../Lib/enc28j60.c ****  * Used with explicit permission of Pascal Stang.
  11:../../../../Lib/enc28j60.c ****  *
  12:../../../../Lib/enc28j60.c ****  * Title: Microchip ENC28J60 Ethernet Interface Driver
  13:../../../../Lib/enc28j60.c ****  * Chip type           : ATMEGA88 with ENC28J60
  14:../../../../Lib/enc28j60.c ****  *********************************************/
  15:../../../../Lib/enc28j60.c **** 
  16:../../../../Lib/enc28j60.c **** #include "enc28j60.h"
  17:../../../../Lib/enc28j60.c **** 
  18:../../../../Lib/enc28j60.c **** 
  19:../../../../Lib/enc28j60.c **** static uint8_t Enc28j60Bank;
  20:../../../../Lib/enc28j60.c **** static uint16_t gNextPacketPtr;
  21:../../../../Lib/enc28j60.c **** 
  22:../../../../Lib/enc28j60.c **** 
  23:../../../../Lib/enc28j60.c **** /**
  24:../../../../Lib/enc28j60.c ****  * Initialize enc28j60
  25:../../../../Lib/enc28j60.c ****  * @param *macaddr - pointer to the mac address (6 bytes)
  26:../../../../Lib/enc28j60.c ****  */
  27:../../../../Lib/enc28j60.c **** static void     enc28j60Init(uint8_t* macaddr);
  28:../../../../Lib/enc28j60.c **** 
  29:../../../../Lib/enc28j60.c **** /**
  30:../../../../Lib/enc28j60.c ****  * Read register value (without changing the bank)
  31:../../../../Lib/enc28j60.c ****  * @param op      - operation type
  32:../../../../Lib/enc28j60.c ****  * @param address - register address
  33:../../../../Lib/enc28j60.c ****  * @return register value
  34:../../../../Lib/enc28j60.c ****  */
  35:../../../../Lib/enc28j60.c **** static uint8_t  enc28j60ReadOp (uint8_t op, uint8_t address);
  36:../../../../Lib/enc28j60.c **** static void     enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data);
  37:../../../../Lib/enc28j60.c **** static void     enc28j60SetBank(uint8_t address);
  38:../../../../Lib/enc28j60.c **** static void     enc28j60ReadBuffer(uint16_t len, uint8_t* data);
  39:../../../../Lib/enc28j60.c **** static void     enc28j60WriteBuffer(uint16_t len, uint8_t* data);
  40:../../../../Lib/enc28j60.c **** 
  41:../../../../Lib/enc28j60.c **** /**
  42:../../../../Lib/enc28j60.c ****  * Reads Enc28j60 control register
  43:../../../../Lib/enc28j60.c ****  * @param address - register address. Banks are changed automatically
  44:../../../../Lib/enc28j60.c ****  * @return control register value
  45:../../../../Lib/enc28j60.c ****  */
  46:../../../../Lib/enc28j60.c **** static uint8_t  enc28j60Read(uint8_t address);
  47:../../../../Lib/enc28j60.c **** 
  48:../../../../Lib/enc28j60.c **** /**
  49:../../../../Lib/enc28j60.c ****  * Writes Enc28j60 control register
  50:../../../../Lib/enc28j60.c ****  * @param address - register address. Banks are changed automatically
  51:../../../../Lib/enc28j60.c ****  * @param data    - control register value to be writen
  52:../../../../Lib/enc28j60.c ****  */
  53:../../../../Lib/enc28j60.c **** static void     enc28j60Write(uint8_t address, uint8_t data);
  54:../../../../Lib/enc28j60.c **** 
  55:../../../../Lib/enc28j60.c **** /**
  56:../../../../Lib/enc28j60.c ****  * Reads Enc28j60 phy register
  57:../../../../Lib/enc28j60.c ****  * @param address - register address. Banks are changed automatically
  58:../../../../Lib/enc28j60.c ****  * @return phy register value
  59:../../../../Lib/enc28j60.c ****  */
  60:../../../../Lib/enc28j60.c **** static uint16_t enc28j60PhyReadH(uint8_t address);
  61:../../../../Lib/enc28j60.c **** 
  62:../../../../Lib/enc28j60.c **** /**
  63:../../../../Lib/enc28j60.c ****  * Writes Enc28j60 phy register
  64:../../../../Lib/enc28j60.c ****  * @param address - register address. Banks are changed automatically
  65:../../../../Lib/enc28j60.c ****  * @param data    - phy register value to be writen
  66:../../../../Lib/enc28j60.c ****  */
  67:../../../../Lib/enc28j60.c **** static void     enc28j60PhyWrite(uint8_t address, uint16_t data);
  68:../../../../Lib/enc28j60.c **** 
  69:../../../../Lib/enc28j60.c **** 
  70:../../../../Lib/enc28j60.c **** //void     enc28j60BufferSend(uint16_t len, roundBuffer* buffer);
  71:../../../../Lib/enc28j60.c **** 
  72:../../../../Lib/enc28j60.c **** uint8_t  enc28j60hasRxPkt(void);
  73:../../../../Lib/enc28j60.c **** uint8_t  enc28j60getrev(void);
  74:../../../../Lib/enc28j60.c **** uint8_t  enc28j60linkup(void);
  75:../../../../Lib/enc28j60.c **** 
  76:../../../../Lib/enc28j60.c **** void nicMacInit(void)
  77:../../../../Lib/enc28j60.c **** {
  78:../../../../Lib/enc28j60.c ****     vTaskDelay          (5);
  79:../../../../Lib/enc28j60.c ****     enc28j60Init        (nicState.mac.addr);
  80:../../../../Lib/enc28j60.c **** //  enc28j60clkout      (2);     // change clkout from 6.25MHz to 12.5MHz
  81:../../../../Lib/enc28j60.c ****     vTaskDelay          (5);
  82:../../../../Lib/enc28j60.c ****     enc28j60PhyWrite    (PHLCON, 0x476);
  83:../../../../Lib/enc28j60.c ****     vTaskDelay          (2);
  84:../../../../Lib/enc28j60.c **** }
  85:../../../../Lib/enc28j60.c **** 
  86:../../../../Lib/enc28j60.c **** uint8_t enc28j60ReadOp(uint8_t op, uint8_t address)
  87:../../../../Lib/enc28j60.c **** {
  88:../../../../Lib/enc28j60.c ****   uint8_t result;
  89:../../../../Lib/enc28j60.c ****   //spiTake();
  90:../../../../Lib/enc28j60.c ****   spiEnableEnc28j60();
  91:../../../../Lib/enc28j60.c **** 
  92:../../../../Lib/enc28j60.c ****   // issue read command
  93:../../../../Lib/enc28j60.c ****   spiSendENC(op | (address & ADDR_MASK));
  94:../../../../Lib/enc28j60.c **** 
  95:../../../../Lib/enc28j60.c ****   // read data
  96:../../../../Lib/enc28j60.c ****   result = spiSendENC(0x00);
  97:../../../../Lib/enc28j60.c **** 
  98:../../../../Lib/enc28j60.c ****   // do dummy read if needed (for mac and mii, see datasheet page 29)
  99:../../../../Lib/enc28j60.c ****   if(address & 0x80)
 100:../../../../Lib/enc28j60.c ****   {
 101:../../../../Lib/enc28j60.c ****     result = spiSendENC(0x00);
 102:../../../../Lib/enc28j60.c ****   }
 103:../../../../Lib/enc28j60.c **** 
 104:../../../../Lib/enc28j60.c ****   spiDisableEnc28j60();
 105:../../../../Lib/enc28j60.c ****  // spiGive();
 106:../../../../Lib/enc28j60.c ****   return result;
 107:../../../../Lib/enc28j60.c **** }
 108:../../../../Lib/enc28j60.c **** 
 109:../../../../Lib/enc28j60.c **** void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
 110:../../../../Lib/enc28j60.c **** {
 111:../../../../Lib/enc28j60.c ****  // spiTake();
 112:../../../../Lib/enc28j60.c ****   spiEnableEnc28j60();
 113:../../../../Lib/enc28j60.c ****   // issue write command
 114:../../../../Lib/enc28j60.c ****   //spiSend(op | (address & ADDR_MASK));
 115:../../../../Lib/enc28j60.c ****   spiSendENC(op | (address & ADDR_MASK));
 116:../../../../Lib/enc28j60.c ****   spiSendENC(data);
 117:../../../../Lib/enc28j60.c ****   spiDisableEnc28j60();
 118:../../../../Lib/enc28j60.c ****  // spiGive();
 119:../../../../Lib/enc28j60.c **** }
 120:../../../../Lib/enc28j60.c **** 
 121:../../../../Lib/enc28j60.c **** void enc28j60ReadBuffer(uint16_t len, uint8_t* data)
 122:../../../../Lib/enc28j60.c **** {
 123:../../../../Lib/enc28j60.c ****  // spiTake();
 124:../../../../Lib/enc28j60.c ****   spiEnableEnc28j60();
 125:../../../../Lib/enc28j60.c ****   spiSendENC(ENC28J60_READ_BUF_MEM);
 126:../../../../Lib/enc28j60.c ****   while(len)
 127:../../../../Lib/enc28j60.c ****   {
 128:../../../../Lib/enc28j60.c ****     len--;
 129:../../../../Lib/enc28j60.c ****     *data = spiSendENC(0x00);
 130:../../../../Lib/enc28j60.c ****     data++;
 131:../../../../Lib/enc28j60.c ****   }
 132:../../../../Lib/enc28j60.c ****   *data='\0';
 133:../../../../Lib/enc28j60.c ****   spiDisableEnc28j60();
 134:../../../../Lib/enc28j60.c ****  // spiGive();
 135:../../../../Lib/enc28j60.c **** }
 136:../../../../Lib/enc28j60.c **** 
 137:../../../../Lib/enc28j60.c **** void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
 138:../../../../Lib/enc28j60.c **** {
 139:../../../../Lib/enc28j60.c ****   //spiTake();
 140:../../../../Lib/enc28j60.c ****   spiEnableEnc28j60();
 141:../../../../Lib/enc28j60.c ****   // issue write command
 142:../../../../Lib/enc28j60.c ****   //spiSend(ENC28J60_WRITE_BUF_MEM);      //
 143:../../../../Lib/enc28j60.c ****   spiSendENC(ENC28J60_WRITE_BUF_MEM);
 144:../../../../Lib/enc28j60.c ****   while(len)
 145:../../../../Lib/enc28j60.c ****   {
 146:../../../../Lib/enc28j60.c ****     len--;
 147:../../../../Lib/enc28j60.c ****     spiSendENC(*data);       // write data
 148:../../../../Lib/enc28j60.c ****     data++;
 149:../../../../Lib/enc28j60.c ****   }
 150:../../../../Lib/enc28j60.c ****   spiDisableEnc28j60();
 151:../../../../Lib/enc28j60.c ****   //spiGive();
 152:../../../../Lib/enc28j60.c **** }
 153:../../../../Lib/enc28j60.c **** 
 154:../../../../Lib/enc28j60.c **** // void enc28j60WriteRoundBuffer(uint8_t len, roundBuffer *buffer)
 155:../../../../Lib/enc28j60.c **** // {
 156:../../../../Lib/enc28j60.c **** //   spiTake();
 157:../../../../Lib/enc28j60.c **** //   spiEnableEnc28j60();
 158:../../../../Lib/enc28j60.c **** //   // issue write command
 159:../../../../Lib/enc28j60.c **** //   //spiSend(ENC28J60_WRITE_BUF_MEM);      //
 160:../../../../Lib/enc28j60.c **** //   spiSend(ENC28J60_WRITE_BUF_MEM);
 161:../../../../Lib/enc28j60.c **** //   uint8_t data;
 162:../../../../Lib/enc28j60.c **** //   while(len)
 163:../../../../Lib/enc28j60.c **** //   {
 164:../../../../Lib/enc28j60.c **** //     len--;
 165:../../../../Lib/enc28j60.c **** //     data = *buffer->readIdx.ptr16;
 166:../../../../Lib/enc28j60.c **** //     buffer->readIdx.ptr.L++;
 167:../../../../Lib/enc28j60.c **** //
 168:../../../../Lib/enc28j60.c **** //     spiSend(*data);       // write data
 169:../../../../Lib/enc28j60.c **** //   }
 170:../../../../Lib/enc28j60.c **** //   spiDisableEnc28j60();
 171:../../../../Lib/enc28j60.c **** //   spiGive();
 172:../../../../Lib/enc28j60.c **** // }
 173:../../../../Lib/enc28j60.c **** 
 174:../../../../Lib/enc28j60.c **** 
 175:../../../../Lib/enc28j60.c **** void enc28j60SetBank(uint8_t address)
 176:../../../../Lib/enc28j60.c **** {
 177:../../../../Lib/enc28j60.c ****   // set the bank (if needed)
 178:../../../../Lib/enc28j60.c ****   if((address & BANK_MASK) != Enc28j60Bank)
 179:../../../../Lib/enc28j60.c ****   {
 180:../../../../Lib/enc28j60.c ****     // set the bank
 181:../../../../Lib/enc28j60.c ****     enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
 182:../../../../Lib/enc28j60.c ****     enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
 183:../../../../Lib/enc28j60.c ****     Enc28j60Bank = (address & BANK_MASK);
 184:../../../../Lib/enc28j60.c ****   }
 185:../../../../Lib/enc28j60.c **** }
 186:../../../../Lib/enc28j60.c **** 
 187:../../../../Lib/enc28j60.c **** uint8_t enc28j60Read(uint8_t address)
 188:../../../../Lib/enc28j60.c **** {
 189:../../../../Lib/enc28j60.c ****   // set the bank
 190:../../../../Lib/enc28j60.c ****   enc28j60SetBank(address);
 191:../../../../Lib/enc28j60.c ****   // do the read
 192:../../../../Lib/enc28j60.c ****   uint8_t result = enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
 193:../../../../Lib/enc28j60.c ****   return result;
 194:../../../../Lib/enc28j60.c **** }
 195:../../../../Lib/enc28j60.c **** 
 196:../../../../Lib/enc28j60.c **** // read upper 8 bits
 197:../../../../Lib/enc28j60.c **** uint16_t enc28j60PhyReadH(uint8_t address)
 198:../../../../Lib/enc28j60.c **** {
 199:../../../../Lib/enc28j60.c ****   // Set the right address and start the register read operation
 200:../../../../Lib/enc28j60.c ****   enc28j60Write(MIREGADR, address);
 201:../../../../Lib/enc28j60.c ****   enc28j60Write(MICMD, MICMD_MIIRD);
 202:../../../../Lib/enc28j60.c **** 
 203:../../../../Lib/enc28j60.c ****   vTaskDelay(0);
 204:../../../../Lib/enc28j60.c **** 
 205:../../../../Lib/enc28j60.c ****   // wait until the PHY read completes
 206:../../../../Lib/enc28j60.c ****   while(enc28j60Read(MISTAT) & MISTAT_BUSY)
 207:../../../../Lib/enc28j60.c ****    vTaskDelay ( 0 ); //FIXME być może tutaj następuje zawieszenie
 208:../../../../Lib/enc28j60.c **** 
 209:../../../../Lib/enc28j60.c ****   // reset reading bit
 210:../../../../Lib/enc28j60.c ****   enc28j60Write(MICMD, 0x00);
 211:../../../../Lib/enc28j60.c **** 
 212:../../../../Lib/enc28j60.c ****   return (enc28j60Read(MIRDH));
 213:../../../../Lib/enc28j60.c **** }
 214:../../../../Lib/enc28j60.c **** 
 215:../../../../Lib/enc28j60.c **** void enc28j60Write(uint8_t address, uint8_t data)
 216:../../../../Lib/enc28j60.c **** {
 217:../../../../Lib/enc28j60.c ****   // set the bank
 218:../../../../Lib/enc28j60.c ****   enc28j60SetBank(address);
 219:../../../../Lib/enc28j60.c ****   // do the write
 220:../../../../Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
 221:../../../../Lib/enc28j60.c **** }
 222:../../../../Lib/enc28j60.c **** 
 223:../../../../Lib/enc28j60.c **** void enc28j60PhyWrite(uint8_t address, uint16_t data)
 224:../../../../Lib/enc28j60.c **** {
 225:../../../../Lib/enc28j60.c ****   // set the PHY register address
 226:../../../../Lib/enc28j60.c ****   enc28j60Write(MIREGADR, address);
 227:../../../../Lib/enc28j60.c ****   // write the PHY data
 228:../../../../Lib/enc28j60.c ****   enc28j60Write(MIWRL, data);
 229:../../../../Lib/enc28j60.c ****   enc28j60Write(MIWRH, data>>8);
 230:../../../../Lib/enc28j60.c ****   // wait until the PHY write completes
 231:../../../../Lib/enc28j60.c **** 
 232:../../../../Lib/enc28j60.c ****   while(enc28j60Read(MISTAT) & MISTAT_BUSY)
 233:../../../../Lib/enc28j60.c ****   {
 234:../../../../Lib/enc28j60.c ****     vTaskDelay ( 0 );         //FIXME być może tutaj następuje zakleszczenie
 235:../../../../Lib/enc28j60.c ****   }
 236:../../../../Lib/enc28j60.c **** }
 237:../../../../Lib/enc28j60.c **** 
 238:../../../../Lib/enc28j60.c **** void enc28j60Init(uint8_t* macaddr)
 239:../../../../Lib/enc28j60.c **** {
 240:../../../../Lib/enc28j60.c ****   // perform system reset
 241:../../../../Lib/enc28j60.c **** 
 242:../../../../Lib/enc28j60.c ****   //ENC28j60 reset is on PE2 TODO add in hardware.c macros for that.
 243:../../../../Lib/enc28j60.c ****   ENC_RST_ON;   // PORTE &= ~0x04;
 244:../../../../Lib/enc28j60.c ****   vTaskDelay(5); // 50ms
 245:../../../../Lib/enc28j60.c ****   ENC_RST_OFF;  //PORTE |= 0x04;
 246:../../../../Lib/enc28j60.c ****   vTaskDelay(5); // 50ms
 247:../../../../Lib/enc28j60.c **** 
 248:../../../../Lib/enc28j60.c ****   // check CLKRDY bit to see if reset is complete
 249:../../../../Lib/enc28j60.c ****   // The CLKRDY does not work. See Rev. B4 Silicon Errata point. Just wait.
 250:../../../../Lib/enc28j60.c ****   //while(!(enc28j60Read(ESTAT) & ESTAT_CLKRDY));
 251:../../../../Lib/enc28j60.c ****   // do bank 0 stuff
 252:../../../../Lib/enc28j60.c ****   // initialize receive buffer
 253:../../../../Lib/enc28j60.c ****   // 16-bit transfers, must write low byte first
 254:../../../../Lib/enc28j60.c ****   // set receive buffer start address
 255:../../../../Lib/enc28j60.c ****   gNextPacketPtr = RXSTART_INIT;
 256:../../../../Lib/enc28j60.c ****   // Rx start
 257:../../../../Lib/enc28j60.c ****   enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
 258:../../../../Lib/enc28j60.c ****   enc28j60Write(ERXSTH, RXSTART_INIT>>8);
 259:../../../../Lib/enc28j60.c ****   // set receive pointer address
 260:../../../../Lib/enc28j60.c ****   enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
 261:../../../../Lib/enc28j60.c ****   enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
 262:../../../../Lib/enc28j60.c ****   // RX end
 263:../../../../Lib/enc28j60.c ****   enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
 264:../../../../Lib/enc28j60.c ****   enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
 265:../../../../Lib/enc28j60.c ****   // TX start
 266:../../../../Lib/enc28j60.c ****   enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
 267:../../../../Lib/enc28j60.c ****   enc28j60Write(ETXSTH, TXSTART_INIT>>8);
 268:../../../../Lib/enc28j60.c ****   // TX end
 269:../../../../Lib/enc28j60.c ****   enc28j60Write(ETXNDL, TXSTOP_INIT&0xFF);
 270:../../../../Lib/enc28j60.c ****   enc28j60Write(ETXNDH, TXSTOP_INIT>>8);
 271:../../../../Lib/enc28j60.c **** 
 272:../../../../Lib/enc28j60.c ****   // do bank 1 stuff, packet filter:
 273:../../../../Lib/enc28j60.c ****   // For broadcast packets we allow only ARP packtets
 274:../../../../Lib/enc28j60.c ****   // All other packets should be unicast only for our mac (MAADR)
 275:../../../../Lib/enc28j60.c ****   //
 276:../../../../Lib/enc28j60.c ****   // The pattern to match on is therefore
 277:../../../../Lib/enc28j60.c ****   // Type     ETH.DST
 278:../../../../Lib/enc28j60.c ****   // ARP      BROADCAST
 279:../../../../Lib/enc28j60.c ****   // 06 08 -- ff ff ff ff ff ff -> ip checksum for theses bytes=f7f9
 280:../../../../Lib/enc28j60.c ****   // in binary these poitions are:11 0000 0011 1111
 281:../../../../Lib/enc28j60.c ****   // This is hex 303F->EPMM0=0x3f,EPMM1=0x30
 282:../../../../Lib/enc28j60.c ****   //enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);  //Bez wejsca dla broadcastu (
 283:../../../../Lib/enc28j60.c ****   enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_MCEN); //Z wejsciem dla ca
 284:../../../../Lib/enc28j60.c ****   enc28j60Write(EPMM0, 0x3f);
 285:../../../../Lib/enc28j60.c ****   enc28j60Write(EPMM1, 0x30);
 286:../../../../Lib/enc28j60.c ****   enc28j60Write(EPMCSL, 0xf9);
 287:../../../../Lib/enc28j60.c ****   enc28j60Write(EPMCSH, 0xf7);
 288:../../../../Lib/enc28j60.c ****   //
 289:../../../../Lib/enc28j60.c ****   //
 290:../../../../Lib/enc28j60.c ****   // do bank 2 stuff
 291:../../../../Lib/enc28j60.c ****   // enable MAC receive
 292:../../../../Lib/enc28j60.c ****   enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
 293:../../../../Lib/enc28j60.c ****   // bring MAC out of reset
 294:../../../../Lib/enc28j60.c ****   enc28j60Write(MACON2, 0x00);
 295:../../../../Lib/enc28j60.c ****   // enable automatic padding to 60bytes and CRC operations
 296:../../../../Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
 297:../../../../Lib/enc28j60.c ****   // set inter-frame gap (non-back-to-back)
 298:../../../../Lib/enc28j60.c ****   enc28j60Write(MAIPGL, 0x12);
 299:../../../../Lib/enc28j60.c ****   enc28j60Write(MAIPGH, 0x0C);
 300:../../../../Lib/enc28j60.c ****   // set inter-frame gap (back-to-back)
 301:../../../../Lib/enc28j60.c ****   enc28j60Write(MABBIPG, 0x12);
 302:../../../../Lib/enc28j60.c ****   // Set the maximum packet size which the controller will accept
 303:../../../../Lib/enc28j60.c ****   // Do not send packets longer than MAX_FRAMELEN:
 304:../../../../Lib/enc28j60.c ****   enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);
 305:../../../../Lib/enc28j60.c ****   enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
 306:../../../../Lib/enc28j60.c **** 
 307:../../../../Lib/enc28j60.c ****   // do bank 3 stuff
 308:../../../../Lib/enc28j60.c ****   // write MAC address
 309:../../../../Lib/enc28j60.c **** 
 310:../../../../Lib/enc28j60.c ****   nicSetMacAddress(macaddr);
 311:../../../../Lib/enc28j60.c **** 
 312:../../../../Lib/enc28j60.c ****   // no loopback of transmitted frames
 313:../../../../Lib/enc28j60.c ****   enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
 314:../../../../Lib/enc28j60.c **** 
 315:../../../../Lib/enc28j60.c ****   enc28j60SetBank(ECON1);                             // switch to bank 0
 316:../../../../Lib/enc28j60.c ****   // enable interrutps
 317:../../../../Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
 318:../../../../Lib/enc28j60.c ****   // enable packet reception
 319:../../../../Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
 320:../../../../Lib/enc28j60.c **** }
 321:../../../../Lib/enc28j60.c **** 
 322:../../../../Lib/enc28j60.c **** // read the revision of the chip:
 323:../../../../Lib/enc28j60.c **** uint8_t enc28j60getrev(void)
 324:../../../../Lib/enc28j60.c **** {
 325:../../../../Lib/enc28j60.c ****   return(enc28j60Read(EREVID));
 326:../../../../Lib/enc28j60.c **** }
 327:../../../../Lib/enc28j60.c **** 
 328:../../../../Lib/enc28j60.c **** // link status
 329:../../../../Lib/enc28j60.c **** uint8_t enc28j60linkup(void)
 330:../../../../Lib/enc28j60.c **** {
 331:../../../../Lib/enc28j60.c ****   // bit 10 (= bit 3 in upper reg)
 332:../../../../Lib/enc28j60.c ****   return(enc28j60PhyReadH(PHSTAT2) && 4);
 333:../../../../Lib/enc28j60.c **** }
 334:../../../../Lib/enc28j60.c **** 
 335:../../../../Lib/enc28j60.c **** void nicSend(uint16_t len)
 336:../../../../Lib/enc28j60.c **** {
 337:../../../../Lib/enc28j60.c ****   // Check no transmit in progress
 338:../../../../Lib/enc28j60.c ****   while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
 339:../../../../Lib/enc28j60.c ****   {
 340:../../../../Lib/enc28j60.c ****     // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
 341:../../../../Lib/enc28j60.c ****     if( (enc28j60Read(EIR) & EIR_TXERIF) )
 342:../../../../Lib/enc28j60.c ****     {
 343:../../../../Lib/enc28j60.c ****       enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
 344:../../../../Lib/enc28j60.c ****       enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
 345:../../../../Lib/enc28j60.c ****     }
 346:../../../../Lib/enc28j60.c ****     vTaskDelay ( 0 ); //FIXME być może tutaj następuje zakleszczenie
 347:../../../../Lib/enc28j60.c ****   }
 348:../../../../Lib/enc28j60.c ****   // Set the write pointer to start of transmit buffer area
 349:../../../../Lib/enc28j60.c ****   enc28j60Write(EWRPTL, TXSTART_INIT&0xFF);
 350:../../../../Lib/enc28j60.c ****   enc28j60Write(EWRPTH, TXSTART_INIT>>8);
 351:../../../../Lib/enc28j60.c ****   // Set the TXND pointer to correspond to the packet size given
 352:../../../../Lib/enc28j60.c ****   enc28j60Write(ETXNDL, (TXSTART_INIT+len)&0xFF);
 353:../../../../Lib/enc28j60.c ****   enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
 354:../../../../Lib/enc28j60.c ****   // write per-packet control byte (0x00 means use macon3 settings)
 355:../../../../Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
 356:../../../../Lib/enc28j60.c ****   // copy the packet into the transmit buffer
 357:../../../../Lib/enc28j60.c ****   enc28j60WriteBuffer(len, nicState.layer2.buf);
 358:../../../../Lib/enc28j60.c ****   // send the contents of the transmit buffer onto the network
 359:../../../../Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
 360:../../../../Lib/enc28j60.c **** }
 361:../../../../Lib/enc28j60.c **** 
 362:../../../../Lib/enc28j60.c **** // just probe if there might be a packet
 363:../../../../Lib/enc28j60.c **** uint8_t enc28j60hasRxPkt(void)
 364:../../../../Lib/enc28j60.c **** {
 365:../../../../Lib/enc28j60.c ****   if( enc28j60Read(EPKTCNT) ==0 )
 366:../../../../Lib/enc28j60.c ****   {
 367:../../../../Lib/enc28j60.c ****     return(0);
 368:../../../../Lib/enc28j60.c ****   }
 369:../../../../Lib/enc28j60.c ****   return(1);
 370:../../../../Lib/enc28j60.c **** }
 371:../../../../Lib/enc28j60.c **** 
 372:../../../../Lib/enc28j60.c **** uint16_t nicPoll(void)
 373:../../../../Lib/enc28j60.c **** {
 374:../../../../Lib/enc28j60.c ****   uint16_t rxstat;
 375:../../../../Lib/enc28j60.c ****   uint16_t len;
 376:../../../../Lib/enc28j60.c ****   // check if a packet has been received and buffered
 377:../../../../Lib/enc28j60.c ****   //if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
 378:../../../../Lib/enc28j60.c ****   // The above does not work. See Rev. B4 Silicon Errata point 6.
 379:../../../../Lib/enc28j60.c ****   if( enc28j60Read(EPKTCNT) == 0 )
 380:../../../../Lib/enc28j60.c ****   {
 381:../../../../Lib/enc28j60.c ****     return(0);
 382:../../../../Lib/enc28j60.c ****   }
 383:../../../../Lib/enc28j60.c **** 
 384:../../../../Lib/enc28j60.c ****   // Set the read pointer to the start of the received packet
 385:../../../../Lib/enc28j60.c ****   enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
 386:../../../../Lib/enc28j60.c ****   enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
 387:../../../../Lib/enc28j60.c ****   // read the next packet pointer
 388:../../../../Lib/enc28j60.c ****   gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 389:../../../../Lib/enc28j60.c ****   gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 390:../../../../Lib/enc28j60.c ****   // read the packet length (see datasheet page 43)
 391:../../../../Lib/enc28j60.c ****   len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 392:../../../../Lib/enc28j60.c ****   len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 393:../../../../Lib/enc28j60.c ****   len-=4; //remove the CRC count
 394:../../../../Lib/enc28j60.c ****   // read the receive status (see datasheet page 43)
 395:../../../../Lib/enc28j60.c ****   rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 396:../../../../Lib/enc28j60.c ****   rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
 397:../../../../Lib/enc28j60.c ****   // limit retrieve length
 398:../../../../Lib/enc28j60.c ****   if (len> nicState.bufferSize -1)
 399:../../../../Lib/enc28j60.c ****   {
 400:../../../../Lib/enc28j60.c ****     len= nicState.bufferSize-1;
 401:../../../../Lib/enc28j60.c ****   }
 402:../../../../Lib/enc28j60.c ****   // check CRC and symbol errors (see datasheet page 44, table 7-3):
 403:../../../../Lib/enc28j60.c ****   // The ERXFCON.CRCEN is set by default. Normally we should not
 404:../../../../Lib/enc28j60.c ****   // need to check this.
 405:../../../../Lib/enc28j60.c **** 
 406:../../../../Lib/enc28j60.c ****   if ((rxstat & 0x80)==0)
 407:../../../../Lib/enc28j60.c ****   {
 408:../../../../Lib/enc28j60.c ****     // invalid
 409:../../../../Lib/enc28j60.c ****     len=0;
 410:../../../../Lib/enc28j60.c ****   }
 411:../../../../Lib/enc28j60.c ****   else
 412:../../../../Lib/enc28j60.c ****   {
 413:../../../../Lib/enc28j60.c ****     // copy the packet from the receive buffer
 414:../../../../Lib/enc28j60.c ****     enc28j60ReadBuffer(len, nicState.layer2.buf);
 415:../../../../Lib/enc28j60.c ****   }
 416:../../../../Lib/enc28j60.c ****   // Move the RX read pointer to the start of the next received packet
 417:../../../../Lib/enc28j60.c ****   // This frees the memory we just read out
 418:../../../../Lib/enc28j60.c ****   enc28j60Write(ERXRDPTL, (gNextPacketPtr &0xFF));
 419:../../../../Lib/enc28j60.c ****   enc28j60Write(ERXRDPTH, (gNextPacketPtr)>>8);
 420:../../../../Lib/enc28j60.c **** 
 421:../../../../Lib/enc28j60.c **** #if RXSTART_INIT > 0
 422:../../../../Lib/enc28j60.c ****   // Move the RX read pointer to the start of the next received packet
 423:../../../../Lib/enc28j60.c ****   // This frees the memory we just read out.
 424:../../../../Lib/enc28j60.c ****   // However, compensate for the errata point 13, rev B4: enver write an even address!
 425:../../../../Lib/enc28j60.c ****   //FIXME remove this warning
 426:../../../../Lib/enc28j60.c ****   if ((gNextPacketPtr - 1 < RXSTART_INIT) || (gNextPacketPtr -1 > RXSTOP_INIT))
 427:../../../../Lib/enc28j60.c ****   {
 428:../../../../Lib/enc28j60.c ****     enc28j60Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
 429:../../../../Lib/enc28j60.c ****     enc28j60Write(ERXRDPTH, (RXSTOP_INIT)>>8);
 430:../../../../Lib/enc28j60.c ****   }
 431:../../../../Lib/enc28j60.c ****   else
 432:../../../../Lib/enc28j60.c ****   {
 433:../../../../Lib/enc28j60.c **** #endif
 434:../../../../Lib/enc28j60.c ****     enc28j60Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
 435:../../../../Lib/enc28j60.c ****     enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
 436:../../../../Lib/enc28j60.c **** #if RXSTART_INIT > 0
 437:../../../../Lib/enc28j60.c ****   }
 438:../../../../Lib/enc28j60.c **** #endif
 439:../../../../Lib/enc28j60.c ****   // decrement the packet counter indicate we are done with this packet
 440:../../../../Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
 441:../../../../Lib/enc28j60.c ****   return(len);
 442:../../../../Lib/enc28j60.c **** }
 443:../../../../Lib/enc28j60.c **** 
 444:../../../../Lib/enc28j60.c **** void spiEnableEnc28j60(void)  {};
 274               	.LM0:
 275               	.LFBB1:
 276               	/* prologue: function */
 277               	/* frame size = 0 */
 278               	/* stack size = 0 */
 279               	.L__stack_usage = 0
 280 0000 0895      		ret
 282               	.Lscope1:
 284               		.stabd	78,0,0
 286               		.weak	spiDisableEnc28j60
 288               	spiDisableEnc28j60:
 289               		.stabd	46,0,0
 445:../../../../Lib/enc28j60.c **** void spiDisableEnc28j60(void) {};
 291               	.LM1:
 292               	.LFBB2:
 293               	/* prologue: function */
 294               	/* frame size = 0 */
 295               	/* stack size = 0 */
 296               	.L__stack_usage = 0
 297 0002 0895      		ret
 299               	.Lscope2:
 301               		.stabd	78,0,0
 307               	enc28j60WriteOp:
 308               		.stabd	46,0,0
 110:../../../../Lib/enc28j60.c ****  // spiTake();
 310               	.LM2:
 311               	.LFBB3:
 110:../../../../Lib/enc28j60.c ****  // spiTake();
 313               	.LM3:
 314 0004 CF93      		push r28
 315 0006 DF93      		push r29
 316 0008 00D0      		rcall .
 317 000a 1F92      		push __zero_reg__
 318 000c CDB7      		in r28,__SP_L__
 319 000e DEB7      		in r29,__SP_H__
 320               	/* prologue: function */
 321               	/* frame size = 3 */
 322               	/* stack size = 5 */
 323               	.L__stack_usage = 5
 112:../../../../Lib/enc28j60.c ****   // issue write command
 325               	.LM4:
 326 0010 4B83      		std Y+3,r20
 327 0012 6A83      		std Y+2,r22
 328 0014 8983      		std Y+1,r24
 329 0016 0E94 0000 		call spiEnableEnc28j60
 115:../../../../Lib/enc28j60.c ****   spiSendENC(data);
 331               	.LM5:
 332 001a 6A81      		ldd r22,Y+2
 333 001c 6F71      		andi r22,lo8(31)
 334 001e 8981      		ldd r24,Y+1
 335 0020 862B      		or r24,r22
 336 0022 0E94 0000 		call spiSendENC
 116:../../../../Lib/enc28j60.c ****   spiDisableEnc28j60();
 338               	.LM6:
 339 0026 4B81      		ldd r20,Y+3
 340 0028 842F      		mov r24,r20
 341 002a 0E94 0000 		call spiSendENC
 342               	/* epilogue start */
 119:../../../../Lib/enc28j60.c **** 
 344               	.LM7:
 345 002e 0F90      		pop __tmp_reg__
 346 0030 0F90      		pop __tmp_reg__
 347 0032 0F90      		pop __tmp_reg__
 348 0034 DF91      		pop r29
 349 0036 CF91      		pop r28
 117:../../../../Lib/enc28j60.c ****  // spiGive();
 351               	.LM8:
 352 0038 0C94 0000 		jmp spiDisableEnc28j60
 354               	.Lscope3:
 356               		.stabd	78,0,0
 360               	enc28j60SetBank:
 361               		.stabd	46,0,0
 176:../../../../Lib/enc28j60.c ****   // set the bank (if needed)
 363               	.LM9:
 364               	.LFBB4:
 365 003c 1F93      		push r17
 366 003e CF93      		push r28
 367 0040 DF93      		push r29
 368               	/* prologue: function */
 369               	/* frame size = 0 */
 370               	/* stack size = 3 */
 371               	.L__stack_usage = 3
 178:../../../../Lib/enc28j60.c ****   {
 373               	.LM10:
 374 0042 182F      		mov r17,r24
 375 0044 1076      		andi r17,lo8(96)
 376 0046 C12F      		mov r28,r17
 377 0048 D0E0      		ldi r29,0
 378 004a 2091 0000 		lds r18,Enc28j60Bank
 379 004e 30E0      		ldi r19,0
 380 0050 C217      		cp r28,r18
 381 0052 D307      		cpc r29,r19
 382 0054 01F0      		breq .L4
 181:../../../../Lib/enc28j60.c ****     enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
 384               	.LM11:
 385 0056 43E0      		ldi r20,lo8(3)
 386 0058 6FE1      		ldi r22,lo8(31)
 387 005a 80EA      		ldi r24,lo8(-96)
 388 005c 0E94 0000 		call enc28j60WriteOp
 182:../../../../Lib/enc28j60.c ****     Enc28j60Bank = (address & BANK_MASK);
 390               	.LM12:
 391 0060 AE01      		movw r20,r28
 392 0062 85E0      		ldi r24,5
 393               		1:
 394 0064 5595      		asr r21
 395 0066 4795      		ror r20
 396 0068 8A95      		dec r24
 397 006a 01F4      		brne 1b
 398 006c 6FE1      		ldi r22,lo8(31)
 399 006e 80E8      		ldi r24,lo8(-128)
 400 0070 0E94 0000 		call enc28j60WriteOp
 183:../../../../Lib/enc28j60.c ****   }
 402               	.LM13:
 403 0074 1093 0000 		sts Enc28j60Bank,r17
 404               	.L4:
 405               	/* epilogue start */
 185:../../../../Lib/enc28j60.c **** 
 407               	.LM14:
 408 0078 DF91      		pop r29
 409 007a CF91      		pop r28
 410 007c 1F91      		pop r17
 411 007e 0895      		ret
 413               	.Lscope4:
 415               		.stabd	78,0,0
 420               	enc28j60Write:
 421               		.stabd	46,0,0
 216:../../../../Lib/enc28j60.c ****   // set the bank
 423               	.LM15:
 424               	.LFBB5:
 425 0080 1F93      		push r17
 426 0082 CF93      		push r28
 427 0084 DF93      		push r29
 428 0086 1F92      		push __zero_reg__
 429 0088 CDB7      		in r28,__SP_L__
 430 008a DEB7      		in r29,__SP_H__
 431               	/* prologue: function */
 432               	/* frame size = 1 */
 433               	/* stack size = 4 */
 434               	.L__stack_usage = 4
 435 008c 182F      		mov r17,r24
 218:../../../../Lib/enc28j60.c ****   // do the write
 437               	.LM16:
 438 008e 6983      		std Y+1,r22
 439 0090 0E94 0000 		call enc28j60SetBank
 220:../../../../Lib/enc28j60.c **** }
 441               	.LM17:
 442 0094 4981      		ldd r20,Y+1
 443 0096 612F      		mov r22,r17
 444 0098 80E4      		ldi r24,lo8(64)
 445               	/* epilogue start */
 221:../../../../Lib/enc28j60.c **** 
 447               	.LM18:
 448 009a 0F90      		pop __tmp_reg__
 449 009c DF91      		pop r29
 450 009e CF91      		pop r28
 451 00a0 1F91      		pop r17
 220:../../../../Lib/enc28j60.c **** }
 453               	.LM19:
 454 00a2 0C94 0000 		jmp enc28j60WriteOp
 456               	.Lscope5:
 458               		.stabd	78,0,0
 463               	enc28j60ReadOp:
 464               		.stabd	46,0,0
  87:../../../../Lib/enc28j60.c ****   uint8_t result;
 466               	.LM20:
 467               	.LFBB6:
 468 00a6 1F93      		push r17
 469 00a8 CF93      		push r28
 470 00aa DF93      		push r29
 471 00ac 1F92      		push __zero_reg__
 472 00ae CDB7      		in r28,__SP_L__
 473 00b0 DEB7      		in r29,__SP_H__
 474               	/* prologue: function */
 475               	/* frame size = 1 */
 476               	/* stack size = 4 */
 477               	.L__stack_usage = 4
 478 00b2 162F      		mov r17,r22
  90:../../../../Lib/enc28j60.c **** 
 480               	.LM21:
 481 00b4 8983      		std Y+1,r24
 482 00b6 0E94 0000 		call spiEnableEnc28j60
  93:../../../../Lib/enc28j60.c **** 
 484               	.LM22:
 485 00ba 912F      		mov r25,r17
 486 00bc 9F71      		andi r25,lo8(31)
 487 00be 8981      		ldd r24,Y+1
 488 00c0 892B      		or r24,r25
 489 00c2 0E94 0000 		call spiSendENC
  96:../../../../Lib/enc28j60.c **** 
 491               	.LM23:
 492 00c6 80E0      		ldi r24,0
 493 00c8 0E94 0000 		call spiSendENC
  99:../../../../Lib/enc28j60.c ****   {
 495               	.LM24:
 496 00cc 17FF      		sbrs r17,7
 497 00ce 00C0      		rjmp .L9
 101:../../../../Lib/enc28j60.c ****   }
 499               	.LM25:
 500 00d0 80E0      		ldi r24,0
 501 00d2 0E94 0000 		call spiSendENC
 502               	.L9:
 104:../../../../Lib/enc28j60.c ****  // spiGive();
 504               	.LM26:
 505 00d6 8983      		std Y+1,r24
 506 00d8 0E94 0000 		call spiDisableEnc28j60
 107:../../../../Lib/enc28j60.c **** 
 508               	.LM27:
 509 00dc 8981      		ldd r24,Y+1
 510               	/* epilogue start */
 511 00de 0F90      		pop __tmp_reg__
 512 00e0 DF91      		pop r29
 513 00e2 CF91      		pop r28
 514 00e4 1F91      		pop r17
 515 00e6 0895      		ret
 520               	.Lscope6:
 522               		.stabd	78,0,0
 526               	enc28j60Read:
 527               		.stabd	46,0,0
 188:../../../../Lib/enc28j60.c ****   // set the bank
 529               	.LM28:
 530               	.LFBB7:
 531 00e8 CF93      		push r28
 532 00ea DF93      		push r29
 533 00ec 1F92      		push __zero_reg__
 534 00ee CDB7      		in r28,__SP_L__
 535 00f0 DEB7      		in r29,__SP_H__
 536               	/* prologue: function */
 537               	/* frame size = 1 */
 538               	/* stack size = 3 */
 539               	.L__stack_usage = 3
 540 00f2 682F      		mov r22,r24
 190:../../../../Lib/enc28j60.c ****   // do the read
 542               	.LM29:
 543 00f4 6983      		std Y+1,r22
 544 00f6 0E94 0000 		call enc28j60SetBank
 192:../../../../Lib/enc28j60.c ****   return result;
 546               	.LM30:
 547 00fa 6981      		ldd r22,Y+1
 548 00fc 80E0      		ldi r24,0
 549               	/* epilogue start */
 194:../../../../Lib/enc28j60.c **** 
 551               	.LM31:
 552 00fe 0F90      		pop __tmp_reg__
 553 0100 DF91      		pop r29
 554 0102 CF91      		pop r28
 192:../../../../Lib/enc28j60.c ****   return result;
 556               	.LM32:
 557 0104 0C94 0000 		jmp enc28j60ReadOp
 559               	.Lscope7:
 561               		.stabd	78,0,0
 565               	enc28j60PhyWrite:
 566               		.stabd	46,0,0
 224:../../../../Lib/enc28j60.c ****   // set the PHY register address
 568               	.LM33:
 569               	.LFBB8:
 570 0108 1F93      		push r17
 571 010a CF93      		push r28
 572 010c DF93      		push r29
 573 010e 1F92      		push __zero_reg__
 574 0110 CDB7      		in r28,__SP_L__
 575 0112 DEB7      		in r29,__SP_H__
 576               	/* prologue: function */
 577               	/* frame size = 1 */
 578               	/* stack size = 4 */
 579               	.L__stack_usage = 4
 580 0114 162F      		mov r17,r22
 226:../../../../Lib/enc28j60.c ****   // write the PHY data
 582               	.LM34:
 583 0116 682F      		mov r22,r24
 584 0118 84ED      		ldi r24,lo8(-44)
 585 011a 7983      		std Y+1,r23
 586 011c 0E94 0000 		call enc28j60Write
 228:../../../../Lib/enc28j60.c ****   enc28j60Write(MIWRH, data>>8);
 588               	.LM35:
 589 0120 612F      		mov r22,r17
 590 0122 86ED      		ldi r24,lo8(-42)
 591 0124 0E94 0000 		call enc28j60Write
 229:../../../../Lib/enc28j60.c ****   // wait until the PHY write completes
 593               	.LM36:
 594 0128 7981      		ldd r23,Y+1
 595 012a 672F      		mov r22,r23
 596 012c 87ED      		ldi r24,lo8(-41)
 597 012e 0E94 0000 		call enc28j60Write
 598               	.L12:
 232:../../../../Lib/enc28j60.c ****   {
 600               	.LM37:
 601 0132 8AEE      		ldi r24,lo8(-22)
 602 0134 0E94 0000 		call enc28j60Read
 603 0138 80FF      		sbrs r24,0
 604 013a 00C0      		rjmp .L14
 234:../../../../Lib/enc28j60.c ****   }
 606               	.LM38:
 607 013c 80E0      		ldi r24,0
 608 013e 90E0      		ldi r25,0
 609 0140 0E94 0000 		call vTaskDelay
 610 0144 00C0      		rjmp .L12
 611               	.L14:
 612               	/* epilogue start */
 236:../../../../Lib/enc28j60.c **** 
 614               	.LM39:
 615 0146 0F90      		pop __tmp_reg__
 616 0148 DF91      		pop r29
 617 014a CF91      		pop r28
 618 014c 1F91      		pop r17
 619 014e 0895      		ret
 621               	.Lscope8:
 623               		.stabd	78,0,0
 625               	.global	enc28j60getrev
 627               	enc28j60getrev:
 628               		.stabd	46,0,0
 324:../../../../Lib/enc28j60.c ****   return(enc28j60Read(EREVID));
 630               	.LM40:
 631               	.LFBB9:
 632               	/* prologue: function */
 633               	/* frame size = 0 */
 634               	/* stack size = 0 */
 635               	.L__stack_usage = 0
 325:../../../../Lib/enc28j60.c **** }
 637               	.LM41:
 638 0150 82E7      		ldi r24,lo8(114)
 639 0152 0C94 0000 		jmp enc28j60Read
 641               	.Lscope9:
 643               		.stabd	78,0,0
 645               	.global	enc28j60hasRxPkt
 647               	enc28j60hasRxPkt:
 648               		.stabd	46,0,0
 364:../../../../Lib/enc28j60.c ****   if( enc28j60Read(EPKTCNT) ==0 )
 650               	.LM42:
 651               	.LFBB10:
 652               	/* prologue: function */
 653               	/* frame size = 0 */
 654               	/* stack size = 0 */
 655               	.L__stack_usage = 0
 365:../../../../Lib/enc28j60.c ****   {
 657               	.LM43:
 658 0156 89E3      		ldi r24,lo8(57)
 659 0158 0E94 0000 		call enc28j60Read
 660 015c 91E0      		ldi r25,lo8(1)
 661 015e 8111      		cpse r24,__zero_reg__
 662 0160 00C0      		rjmp .L17
 663 0162 90E0      		ldi r25,0
 664               	.L17:
 370:../../../../Lib/enc28j60.c **** 
 666               	.LM44:
 667 0164 892F      		mov r24,r25
 668 0166 0895      		ret
 670               	.Lscope10:
 672               		.stabd	78,0,0
 674               	.global	enc28j60linkup
 676               	enc28j60linkup:
 677               		.stabd	46,0,0
 330:../../../../Lib/enc28j60.c ****   // bit 10 (= bit 3 in upper reg)
 679               	.LM45:
 680               	.LFBB11:
 681               	/* prologue: function */
 682               	/* frame size = 0 */
 683               	/* stack size = 0 */
 684               	.L__stack_usage = 0
 685               	.LBB4:
 686               	.LBB5:
 200:../../../../Lib/enc28j60.c ****   enc28j60Write(MICMD, MICMD_MIIRD);
 688               	.LM46:
 689 0168 61E1      		ldi r22,lo8(17)
 690 016a 84ED      		ldi r24,lo8(-44)
 691 016c 0E94 0000 		call enc28j60Write
 201:../../../../Lib/enc28j60.c **** 
 693               	.LM47:
 694 0170 61E0      		ldi r22,lo8(1)
 695 0172 82ED      		ldi r24,lo8(-46)
 696 0174 0E94 0000 		call enc28j60Write
 697               	.L20:
 207:../../../../Lib/enc28j60.c **** 
 699               	.LM48:
 700 0178 80E0      		ldi r24,0
 701 017a 90E0      		ldi r25,0
 702 017c 0E94 0000 		call vTaskDelay
 206:../../../../Lib/enc28j60.c ****    vTaskDelay ( 0 ); //FIXME być może tutaj następuje zawieszenie
 704               	.LM49:
 705 0180 8AEE      		ldi r24,lo8(-22)
 706 0182 0E94 0000 		call enc28j60Read
 707 0186 80FD      		sbrc r24,0
 708 0188 00C0      		rjmp .L20
 210:../../../../Lib/enc28j60.c **** 
 710               	.LM50:
 711 018a 60E0      		ldi r22,0
 712 018c 82ED      		ldi r24,lo8(-46)
 713 018e 0E94 0000 		call enc28j60Write
 212:../../../../Lib/enc28j60.c **** }
 715               	.LM51:
 716 0192 89ED      		ldi r24,lo8(-39)
 717 0194 0E94 0000 		call enc28j60Read
 718               	.LBE5:
 719               	.LBE4:
 332:../../../../Lib/enc28j60.c **** }
 721               	.LM52:
 722 0198 91E0      		ldi r25,lo8(1)
 723 019a 8111      		cpse r24,__zero_reg__
 724 019c 00C0      		rjmp .L21
 725 019e 90E0      		ldi r25,0
 726               	.L21:
 333:../../../../Lib/enc28j60.c **** 
 728               	.LM53:
 729 01a0 892F      		mov r24,r25
 730 01a2 0895      		ret
 732               	.Lscope11:
 734               		.stabd	78,0,0
 737               		.weak	nicSend
 739               	nicSend:
 740               		.stabd	46,0,0
 336:../../../../Lib/enc28j60.c ****   // Check no transmit in progress
 742               	.LM54:
 743               	.LFBB12:
 744 01a4 0F93      		push r16
 745 01a6 1F93      		push r17
 746 01a8 CF93      		push r28
 747 01aa DF93      		push r29
 748               	/* prologue: function */
 749               	/* frame size = 0 */
 750               	/* stack size = 4 */
 751               	.L__stack_usage = 4
 752 01ac EC01      		movw r28,r24
 753               	.L23:
 338:../../../../Lib/enc28j60.c ****   {
 755               	.LM55:
 756 01ae 6FE1      		ldi r22,lo8(31)
 757 01b0 80E0      		ldi r24,0
 758 01b2 0E94 0000 		call enc28j60ReadOp
 759 01b6 83FF      		sbrs r24,3
 760 01b8 00C0      		rjmp .L31
 341:../../../../Lib/enc28j60.c ****     {
 762               	.LM56:
 763 01ba 8CE1      		ldi r24,lo8(28)
 764 01bc 0E94 0000 		call enc28j60Read
 765 01c0 81FF      		sbrs r24,1
 766 01c2 00C0      		rjmp .L24
 343:../../../../Lib/enc28j60.c ****       enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
 768               	.LM57:
 769 01c4 40E8      		ldi r20,lo8(-128)
 770 01c6 6FE1      		ldi r22,lo8(31)
 771 01c8 80E8      		ldi r24,lo8(-128)
 772 01ca 0E94 0000 		call enc28j60WriteOp
 344:../../../../Lib/enc28j60.c ****     }
 774               	.LM58:
 775 01ce 40E8      		ldi r20,lo8(-128)
 776 01d0 6FE1      		ldi r22,lo8(31)
 777 01d2 80EA      		ldi r24,lo8(-96)
 778 01d4 0E94 0000 		call enc28j60WriteOp
 779               	.L24:
 346:../../../../Lib/enc28j60.c ****   }
 781               	.LM59:
 782 01d8 80E0      		ldi r24,0
 783 01da 90E0      		ldi r25,0
 784 01dc 0E94 0000 		call vTaskDelay
 785 01e0 00C0      		rjmp .L23
 786               	.L31:
 349:../../../../Lib/enc28j60.c ****   enc28j60Write(EWRPTH, TXSTART_INIT>>8);
 788               	.LM60:
 789 01e2 6FEF      		ldi r22,lo8(-1)
 790 01e4 82E0      		ldi r24,lo8(2)
 791 01e6 0E94 0000 		call enc28j60Write
 350:../../../../Lib/enc28j60.c ****   // Set the TXND pointer to correspond to the packet size given
 793               	.LM61:
 794 01ea 69E1      		ldi r22,lo8(25)
 795 01ec 83E0      		ldi r24,lo8(3)
 796 01ee 0E94 0000 		call enc28j60Write
 352:../../../../Lib/enc28j60.c ****   enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
 798               	.LM62:
 799 01f2 6C2F      		mov r22,r28
 800 01f4 6150      		subi r22,lo8(-(-1))
 801 01f6 86E0      		ldi r24,lo8(6)
 802 01f8 0E94 0000 		call enc28j60Write
 353:../../../../Lib/enc28j60.c ****   // write per-packet control byte (0x00 means use macon3 settings)
 804               	.LM63:
 805 01fc CE01      		movw r24,r28
 806 01fe 8150      		subi r24,1
 807 0200 964E      		sbci r25,-26
 808 0202 692F      		mov r22,r25
 809 0204 87E0      		ldi r24,lo8(7)
 810 0206 0E94 0000 		call enc28j60Write
 355:../../../../Lib/enc28j60.c ****   // copy the packet into the transmit buffer
 812               	.LM64:
 813 020a 40E0      		ldi r20,0
 814 020c 60E0      		ldi r22,0
 815 020e 8AE7      		ldi r24,lo8(122)
 816 0210 0E94 0000 		call enc28j60WriteOp
 357:../../../../Lib/enc28j60.c ****   // send the contents of the transmit buffer onto the network
 818               	.LM65:
 819 0214 0091 0000 		lds r16,nicState+8
 820 0218 1091 0000 		lds r17,nicState+8+1
 821               	.LBB8:
 822               	.LBB9:
 140:../../../../Lib/enc28j60.c ****   // issue write command
 824               	.LM66:
 825 021c 0E94 0000 		call spiEnableEnc28j60
 143:../../../../Lib/enc28j60.c ****   while(len)
 827               	.LM67:
 828 0220 8AE7      		ldi r24,lo8(122)
 829 0222 0E94 0000 		call spiSendENC
 830 0226 C00F      		add r28,r16
 831 0228 D11F      		adc r29,r17
 832               	.L26:
 144:../../../../Lib/enc28j60.c ****   {
 834               	.LM68:
 835 022a 0C17      		cp r16,r28
 836 022c 1D07      		cpc r17,r29
 837 022e 01F0      		breq .L32
 147:../../../../Lib/enc28j60.c ****     data++;
 839               	.LM69:
 840 0230 F801      		movw r30,r16
 841 0232 8191      		ld r24,Z+
 842 0234 8F01      		movw r16,r30
 843 0236 0E94 0000 		call spiSendENC
 844 023a 00C0      		rjmp .L26
 845               	.L32:
 150:../../../../Lib/enc28j60.c ****   //spiGive();
 847               	.LM70:
 848 023c 0E94 0000 		call spiDisableEnc28j60
 849               	.LBE9:
 850               	.LBE8:
 359:../../../../Lib/enc28j60.c **** }
 852               	.LM71:
 853 0240 48E0      		ldi r20,lo8(8)
 854 0242 6FE1      		ldi r22,lo8(31)
 855 0244 80E8      		ldi r24,lo8(-128)
 856               	/* epilogue start */
 360:../../../../Lib/enc28j60.c **** 
 858               	.LM72:
 859 0246 DF91      		pop r29
 860 0248 CF91      		pop r28
 861 024a 1F91      		pop r17
 862 024c 0F91      		pop r16
 359:../../../../Lib/enc28j60.c **** }
 864               	.LM73:
 865 024e 0C94 0000 		jmp enc28j60WriteOp
 870               	.Lscope12:
 872               		.stabd	78,0,0
 874               		.weak	nicPoll
 876               	nicPoll:
 877               		.stabd	46,0,0
 373:../../../../Lib/enc28j60.c ****   uint16_t rxstat;
 879               	.LM74:
 880               	.LFBB13:
 881 0252 EF92      		push r14
 882 0254 FF92      		push r15
 883 0256 0F93      		push r16
 884 0258 1F93      		push r17
 885 025a CF93      		push r28
 886 025c DF93      		push r29
 887               	/* prologue: function */
 888               	/* frame size = 0 */
 889               	/* stack size = 6 */
 890               	.L__stack_usage = 6
 379:../../../../Lib/enc28j60.c ****   {
 892               	.LM75:
 893 025e 89E3      		ldi r24,lo8(57)
 894 0260 0E94 0000 		call enc28j60Read
 895 0264 8823      		tst r24
 896 0266 01F4      		brne .+2
 897 0268 00C0      		rjmp .L39
 385:../../../../Lib/enc28j60.c ****   enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
 899               	.LM76:
 900 026a 6091 0000 		lds r22,gNextPacketPtr
 901 026e 80E0      		ldi r24,0
 902 0270 0E94 0000 		call enc28j60Write
 386:../../../../Lib/enc28j60.c ****   // read the next packet pointer
 904               	.LM77:
 905 0274 6091 0000 		lds r22,gNextPacketPtr+1
 906 0278 81E0      		ldi r24,lo8(1)
 907 027a 0E94 0000 		call enc28j60Write
 388:../../../../Lib/enc28j60.c ****   gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 909               	.LM78:
 910 027e 60E0      		ldi r22,0
 911 0280 8AE3      		ldi r24,lo8(58)
 912 0282 0E94 0000 		call enc28j60ReadOp
 913 0286 90E0      		ldi r25,0
 914 0288 9093 0000 		sts gNextPacketPtr+1,r25
 915 028c 8093 0000 		sts gNextPacketPtr,r24
 389:../../../../Lib/enc28j60.c ****   // read the packet length (see datasheet page 43)
 917               	.LM79:
 918 0290 60E0      		ldi r22,0
 919 0292 8AE3      		ldi r24,lo8(58)
 920 0294 0E94 0000 		call enc28j60ReadOp
 921 0298 2091 0000 		lds r18,gNextPacketPtr
 922 029c 3091 0000 		lds r19,gNextPacketPtr+1
 923 02a0 382B      		or r19,r24
 924 02a2 3093 0000 		sts gNextPacketPtr+1,r19
 925 02a6 2093 0000 		sts gNextPacketPtr,r18
 391:../../../../Lib/enc28j60.c ****   len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 927               	.LM80:
 928 02aa 60E0      		ldi r22,0
 929 02ac 8AE3      		ldi r24,lo8(58)
 930 02ae 0E94 0000 		call enc28j60ReadOp
 931 02b2 C82F      		mov r28,r24
 392:../../../../Lib/enc28j60.c ****   len-=4; //remove the CRC count
 933               	.LM81:
 934 02b4 60E0      		ldi r22,0
 935 02b6 8AE3      		ldi r24,lo8(58)
 936 02b8 0E94 0000 		call enc28j60ReadOp
 937 02bc F82E      		mov r15,r24
 395:../../../../Lib/enc28j60.c ****   rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
 939               	.LM82:
 940 02be 60E0      		ldi r22,0
 941 02c0 8AE3      		ldi r24,lo8(58)
 942 02c2 0E94 0000 		call enc28j60ReadOp
 943 02c6 082F      		mov r16,r24
 396:../../../../Lib/enc28j60.c ****   // limit retrieve length
 945               	.LM83:
 946 02c8 60E0      		ldi r22,0
 947 02ca 8AE3      		ldi r24,lo8(58)
 948 02cc 0E94 0000 		call enc28j60ReadOp
 398:../../../../Lib/enc28j60.c ****   {
 950               	.LM84:
 951 02d0 2091 0000 		lds r18,nicState
 952 02d4 3091 0000 		lds r19,nicState+1
 406:../../../../Lib/enc28j60.c ****   {
 954               	.LM85:
 955 02d8 07FF      		sbrs r16,7
 956 02da 00C0      		rjmp .L40
 398:../../../../Lib/enc28j60.c ****   {
 958               	.LM86:
 959 02dc 2150      		subi r18,1
 960 02de 3109      		sbc r19,__zero_reg__
 392:../../../../Lib/enc28j60.c ****   len-=4; //remove the CRC count
 962               	.LM87:
 963 02e0 D0E0      		ldi r29,0
 964 02e2 DF29      		or r29,r15
 965 02e4 2497      		sbiw r28,4
 966 02e6 2C17      		cp r18,r28
 967 02e8 3D07      		cpc r19,r29
 968 02ea 00F4      		brsh .L36
 969 02ec E901      		movw r28,r18
 970               	.L36:
 414:../../../../Lib/enc28j60.c ****   }
 972               	.LM88:
 973 02ee 0091 0000 		lds r16,nicState+8
 974 02f2 1091 0000 		lds r17,nicState+8+1
 975               	.LBB12:
 976               	.LBB13:
 124:../../../../Lib/enc28j60.c ****   spiSendENC(ENC28J60_READ_BUF_MEM);
 978               	.LM89:
 979 02f6 0E94 0000 		call spiEnableEnc28j60
 125:../../../../Lib/enc28j60.c ****   while(len)
 981               	.LM90:
 982 02fa 8AE3      		ldi r24,lo8(58)
 983 02fc 0E94 0000 		call spiSendENC
 984 0300 7801      		movw r14,r16
 985 0302 EC0E      		add r14,r28
 986 0304 FD1E      		adc r15,r29
 987               	.L37:
 126:../../../../Lib/enc28j60.c ****   {
 989               	.LM91:
 990 0306 0E15      		cp r16,r14
 991 0308 1F05      		cpc r17,r15
 992 030a 01F0      		breq .L41
 129:../../../../Lib/enc28j60.c ****     data++;
 994               	.LM92:
 995 030c 80E0      		ldi r24,0
 996 030e 0E94 0000 		call spiSendENC
 997 0312 F801      		movw r30,r16
 998 0314 8193      		st Z+,r24
 999 0316 8F01      		movw r16,r30
 1000 0318 00C0      		rjmp .L37
 1001               	.L41:
 132:../../../../Lib/enc28j60.c ****   spiDisableEnc28j60();
 1003               	.LM93:
 1004 031a F801      		movw r30,r16
 1005 031c 1082      		st Z,__zero_reg__
 133:../../../../Lib/enc28j60.c ****  // spiGive();
 1007               	.LM94:
 1008 031e 0E94 0000 		call spiDisableEnc28j60
 1009 0322 00C0      		rjmp .L35
 1010               	.L40:
 1011               	.LBE13:
 1012               	.LBE12:
 409:../../../../Lib/enc28j60.c ****   }
 1014               	.LM95:
 1015 0324 C0E0      		ldi r28,0
 1016 0326 D0E0      		ldi r29,0
 1017               	.L35:
 418:../../../../Lib/enc28j60.c ****   enc28j60Write(ERXRDPTH, (gNextPacketPtr)>>8);
 1019               	.LM96:
 1020 0328 6091 0000 		lds r22,gNextPacketPtr
 1021 032c 8CE0      		ldi r24,lo8(12)
 1022 032e 0E94 0000 		call enc28j60Write
 419:../../../../Lib/enc28j60.c **** 
 1024               	.LM97:
 1025 0332 6091 0000 		lds r22,gNextPacketPtr+1
 1026 0336 8DE0      		ldi r24,lo8(13)
 1027 0338 0E94 0000 		call enc28j60Write
 434:../../../../Lib/enc28j60.c ****     enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
 1029               	.LM98:
 1030 033c 6091 0000 		lds r22,gNextPacketPtr
 1031 0340 6150      		subi r22,lo8(-(-1))
 1032 0342 8CE0      		ldi r24,lo8(12)
 1033 0344 0E94 0000 		call enc28j60Write
 435:../../../../Lib/enc28j60.c **** #if RXSTART_INIT > 0
 1035               	.LM99:
 1036 0348 8091 0000 		lds r24,gNextPacketPtr
 1037 034c 9091 0000 		lds r25,gNextPacketPtr+1
 1038 0350 0197      		sbiw r24,1
 1039 0352 692F      		mov r22,r25
 1040 0354 8DE0      		ldi r24,lo8(13)
 1041 0356 0E94 0000 		call enc28j60Write
 440:../../../../Lib/enc28j60.c ****   return(len);
 1043               	.LM100:
 1044 035a 40E4      		ldi r20,lo8(64)
 1045 035c 6EE1      		ldi r22,lo8(30)
 1046 035e 80E8      		ldi r24,lo8(-128)
 1047 0360 0E94 0000 		call enc28j60WriteOp
 441:../../../../Lib/enc28j60.c **** }
 1049               	.LM101:
 1050 0364 CE01      		movw r24,r28
 1051 0366 00C0      		rjmp .L34
 1052               	.L39:
 381:../../../../Lib/enc28j60.c ****   }
 1054               	.LM102:
 1055 0368 80E0      		ldi r24,0
 1056 036a 90E0      		ldi r25,0
 1057               	.L34:
 1058               	/* epilogue start */
 442:../../../../Lib/enc28j60.c **** 
 1060               	.LM103:
 1061 036c DF91      		pop r29
 1062 036e CF91      		pop r28
 1063 0370 1F91      		pop r17
 1064 0372 0F91      		pop r16
 1065 0374 FF90      		pop r15
 1066 0376 EF90      		pop r14
 1067 0378 0895      		ret
 1072               	.Lscope13:
 1074               		.stabd	78,0,0
 1077               		.weak	nicSetMacAddress
 1079               	nicSetMacAddress:
 1080               		.stabd	46,0,0
 446:../../../../Lib/enc28j60.c **** 
 447:../../../../Lib/enc28j60.c **** void     nicSetMacAddress(uint8_t* macaddr)
 448:../../../../Lib/enc28j60.c **** {
 1082               	.LM104:
 1083               	.LFBB14:
 1084 037a CF93      		push r28
 1085 037c DF93      		push r29
 1086               	/* prologue: function */
 1087               	/* frame size = 0 */
 1088               	/* stack size = 2 */
 1089               	.L__stack_usage = 2
 1090 037e EC01      		movw r28,r24
 449:../../../../Lib/enc28j60.c **** //NOTE: MAC address in ENC28J60 is byte-backward
 450:../../../../Lib/enc28j60.c ****   enc28j60Write(MAADR5, macaddr[0]);
 1092               	.LM105:
 1093 0380 6881      		ld r22,Y
 1094 0382 84EE      		ldi r24,lo8(-28)
 1095 0384 0E94 0000 		call enc28j60Write
 451:../../../../Lib/enc28j60.c ****   enc28j60Write(MAADR4, macaddr[1]);
 1097               	.LM106:
 1098 0388 6981      		ldd r22,Y+1
 1099 038a 85EE      		ldi r24,lo8(-27)
 1100 038c 0E94 0000 		call enc28j60Write
 452:../../../../Lib/enc28j60.c ****   enc28j60Write(MAADR3, macaddr[2]);
 1102               	.LM107:
 1103 0390 6A81      		ldd r22,Y+2
 1104 0392 82EE      		ldi r24,lo8(-30)
 1105 0394 0E94 0000 		call enc28j60Write
 453:../../../../Lib/enc28j60.c ****   enc28j60Write(MAADR2, macaddr[3]);
 1107               	.LM108:
 1108 0398 6B81      		ldd r22,Y+3
 1109 039a 83EE      		ldi r24,lo8(-29)
 1110 039c 0E94 0000 		call enc28j60Write
 454:../../../../Lib/enc28j60.c ****   enc28j60Write(MAADR1, macaddr[4]);
 1112               	.LM109:
 1113 03a0 6C81      		ldd r22,Y+4
 1114 03a2 80EE      		ldi r24,lo8(-32)
 1115 03a4 0E94 0000 		call enc28j60Write
 455:../../../../Lib/enc28j60.c ****   enc28j60Write(MAADR0, macaddr[5]);
 1117               	.LM110:
 1118 03a8 6D81      		ldd r22,Y+5
 1119 03aa 81EE      		ldi r24,lo8(-31)
 1120               	/* epilogue start */
 456:../../../../Lib/enc28j60.c ****   //strncpy((void *)(nicState.mac.addr), (void *)(macaddr), 6);
 457:../../../../Lib/enc28j60.c **** }
 1122               	.LM111:
 1123 03ac DF91      		pop r29
 1124 03ae CF91      		pop r28
 455:../../../../Lib/enc28j60.c ****   enc28j60Write(MAADR0, macaddr[5]);
 1126               	.LM112:
 1127 03b0 0C94 0000 		jmp enc28j60Write
 1129               	.Lscope14:
 1131               		.stabd	78,0,0
 1133               		.weak	nicMacInit
 1135               	nicMacInit:
 1136               		.stabd	46,0,0
  77:../../../../Lib/enc28j60.c ****     vTaskDelay          (5);
 1138               	.LM113:
 1139               	.LFBB15:
 1140               	/* prologue: function */
 1141               	/* frame size = 0 */
 1142               	/* stack size = 0 */
 1143               	.L__stack_usage = 0
  78:../../../../Lib/enc28j60.c ****     enc28j60Init        (nicState.mac.addr);
 1145               	.LM114:
 1146 03b4 85E0      		ldi r24,lo8(5)
 1147 03b6 90E0      		ldi r25,0
 1148 03b8 0E94 0000 		call vTaskDelay
 1149               	.LBB16:
 1150               	.LBB17:
 243:../../../../Lib/enc28j60.c ****   vTaskDelay(5); // 50ms
 1152               	.LM115:
 1153 03bc 1A98      		cbi 0x3,2
 244:../../../../Lib/enc28j60.c ****   ENC_RST_OFF;  //PORTE |= 0x04;
 1155               	.LM116:
 1156 03be 85E0      		ldi r24,lo8(5)
 1157 03c0 90E0      		ldi r25,0
 1158 03c2 0E94 0000 		call vTaskDelay
 245:../../../../Lib/enc28j60.c ****   vTaskDelay(5); // 50ms
 1160               	.LM117:
 1161 03c6 1A9A      		sbi 0x3,2
 246:../../../../Lib/enc28j60.c **** 
 1163               	.LM118:
 1164 03c8 85E0      		ldi r24,lo8(5)
 1165 03ca 90E0      		ldi r25,0
 1166 03cc 0E94 0000 		call vTaskDelay
 255:../../../../Lib/enc28j60.c ****   // Rx start
 1168               	.LM119:
 1169 03d0 1092 0000 		sts gNextPacketPtr+1,__zero_reg__
 1170 03d4 1092 0000 		sts gNextPacketPtr,__zero_reg__
 257:../../../../Lib/enc28j60.c ****   enc28j60Write(ERXSTH, RXSTART_INIT>>8);
 1172               	.LM120:
 1173 03d8 60E0      		ldi r22,0
 1174 03da 88E0      		ldi r24,lo8(8)
 1175 03dc 0E94 0000 		call enc28j60Write
 258:../../../../Lib/enc28j60.c ****   // set receive pointer address
 1177               	.LM121:
 1178 03e0 60E0      		ldi r22,0
 1179 03e2 89E0      		ldi r24,lo8(9)
 1180 03e4 0E94 0000 		call enc28j60Write
 260:../../../../Lib/enc28j60.c ****   enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
 1182               	.LM122:
 1183 03e8 60E0      		ldi r22,0
 1184 03ea 8CE0      		ldi r24,lo8(12)
 1185 03ec 0E94 0000 		call enc28j60Write
 261:../../../../Lib/enc28j60.c ****   // RX end
 1187               	.LM123:
 1188 03f0 60E0      		ldi r22,0
 1189 03f2 8DE0      		ldi r24,lo8(13)
 1190 03f4 0E94 0000 		call enc28j60Write
 263:../../../../Lib/enc28j60.c ****   enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
 1192               	.LM124:
 1193 03f8 6EEF      		ldi r22,lo8(-2)
 1194 03fa 8AE0      		ldi r24,lo8(10)
 1195 03fc 0E94 0000 		call enc28j60Write
 264:../../../../Lib/enc28j60.c ****   // TX start
 1197               	.LM125:
 1198 0400 69E1      		ldi r22,lo8(25)
 1199 0402 8BE0      		ldi r24,lo8(11)
 1200 0404 0E94 0000 		call enc28j60Write
 266:../../../../Lib/enc28j60.c ****   enc28j60Write(ETXSTH, TXSTART_INIT>>8);
 1202               	.LM126:
 1203 0408 6FEF      		ldi r22,lo8(-1)
 1204 040a 84E0      		ldi r24,lo8(4)
 1205 040c 0E94 0000 		call enc28j60Write
 267:../../../../Lib/enc28j60.c ****   // TX end
 1207               	.LM127:
 1208 0410 69E1      		ldi r22,lo8(25)
 1209 0412 85E0      		ldi r24,lo8(5)
 1210 0414 0E94 0000 		call enc28j60Write
 269:../../../../Lib/enc28j60.c ****   enc28j60Write(ETXNDH, TXSTOP_INIT>>8);
 1212               	.LM128:
 1213 0418 6FEF      		ldi r22,lo8(-1)
 1214 041a 86E0      		ldi r24,lo8(6)
 1215 041c 0E94 0000 		call enc28j60Write
 270:../../../../Lib/enc28j60.c **** 
 1217               	.LM129:
 1218 0420 6FE1      		ldi r22,lo8(31)
 1219 0422 87E0      		ldi r24,lo8(7)
 1220 0424 0E94 0000 		call enc28j60Write
 283:../../../../Lib/enc28j60.c ****   enc28j60Write(EPMM0, 0x3f);
 1222               	.LM130:
 1223 0428 62EB      		ldi r22,lo8(-78)
 1224 042a 88E3      		ldi r24,lo8(56)
 1225 042c 0E94 0000 		call enc28j60Write
 284:../../../../Lib/enc28j60.c ****   enc28j60Write(EPMM1, 0x30);
 1227               	.LM131:
 1228 0430 6FE3      		ldi r22,lo8(63)
 1229 0432 88E2      		ldi r24,lo8(40)
 1230 0434 0E94 0000 		call enc28j60Write
 285:../../../../Lib/enc28j60.c ****   enc28j60Write(EPMCSL, 0xf9);
 1232               	.LM132:
 1233 0438 60E3      		ldi r22,lo8(48)
 1234 043a 89E2      		ldi r24,lo8(41)
 1235 043c 0E94 0000 		call enc28j60Write
 286:../../../../Lib/enc28j60.c ****   enc28j60Write(EPMCSH, 0xf7);
 1237               	.LM133:
 1238 0440 69EF      		ldi r22,lo8(-7)
 1239 0442 80E3      		ldi r24,lo8(48)
 1240 0444 0E94 0000 		call enc28j60Write
 287:../../../../Lib/enc28j60.c ****   //
 1242               	.LM134:
 1243 0448 67EF      		ldi r22,lo8(-9)
 1244 044a 81E3      		ldi r24,lo8(49)
 1245 044c 0E94 0000 		call enc28j60Write
 292:../../../../Lib/enc28j60.c ****   // bring MAC out of reset
 1247               	.LM135:
 1248 0450 6DE0      		ldi r22,lo8(13)
 1249 0452 80EC      		ldi r24,lo8(-64)
 1250 0454 0E94 0000 		call enc28j60Write
 294:../../../../Lib/enc28j60.c ****   // enable automatic padding to 60bytes and CRC operations
 1252               	.LM136:
 1253 0458 60E0      		ldi r22,0
 1254 045a 81EC      		ldi r24,lo8(-63)
 1255 045c 0E94 0000 		call enc28j60Write
 296:../../../../Lib/enc28j60.c ****   // set inter-frame gap (non-back-to-back)
 1257               	.LM137:
 1258 0460 42E3      		ldi r20,lo8(50)
 1259 0462 62EC      		ldi r22,lo8(-62)
 1260 0464 80E8      		ldi r24,lo8(-128)
 1261 0466 0E94 0000 		call enc28j60WriteOp
 298:../../../../Lib/enc28j60.c ****   enc28j60Write(MAIPGH, 0x0C);
 1263               	.LM138:
 1264 046a 62E1      		ldi r22,lo8(18)
 1265 046c 86EC      		ldi r24,lo8(-58)
 1266 046e 0E94 0000 		call enc28j60Write
 299:../../../../Lib/enc28j60.c ****   // set inter-frame gap (back-to-back)
 1268               	.LM139:
 1269 0472 6CE0      		ldi r22,lo8(12)
 1270 0474 87EC      		ldi r24,lo8(-57)
 1271 0476 0E94 0000 		call enc28j60Write
 301:../../../../Lib/enc28j60.c ****   // Set the maximum packet size which the controller will accept
 1273               	.LM140:
 1274 047a 62E1      		ldi r22,lo8(18)
 1275 047c 84EC      		ldi r24,lo8(-60)
 1276 047e 0E94 0000 		call enc28j60Write
 304:../../../../Lib/enc28j60.c ****   enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
 1278               	.LM141:
 1279 0482 6CED      		ldi r22,lo8(-36)
 1280 0484 8AEC      		ldi r24,lo8(-54)
 1281 0486 0E94 0000 		call enc28j60Write
 305:../../../../Lib/enc28j60.c **** 
 1283               	.LM142:
 1284 048a 65E0      		ldi r22,lo8(5)
 1285 048c 8BEC      		ldi r24,lo8(-53)
 1286 048e 0E94 0000 		call enc28j60Write
 310:../../../../Lib/enc28j60.c **** 
 1288               	.LM143:
 1289 0492 80E0      		ldi r24,lo8(nicState+2)
 1290 0494 90E0      		ldi r25,hi8(nicState+2)
 1291 0496 0E94 0000 		call nicSetMacAddress
 313:../../../../Lib/enc28j60.c **** 
 1293               	.LM144:
 1294 049a 60E0      		ldi r22,0
 1295 049c 71E0      		ldi r23,lo8(1)
 1296 049e 80E1      		ldi r24,lo8(16)
 1297 04a0 0E94 0000 		call enc28j60PhyWrite
 315:../../../../Lib/enc28j60.c ****   // enable interrutps
 1299               	.LM145:
 1300 04a4 8FE1      		ldi r24,lo8(31)
 1301 04a6 0E94 0000 		call enc28j60SetBank
 317:../../../../Lib/enc28j60.c ****   // enable packet reception
 1303               	.LM146:
 1304 04aa 40EC      		ldi r20,lo8(-64)
 1305 04ac 6BE1      		ldi r22,lo8(27)
 1306 04ae 80E8      		ldi r24,lo8(-128)
 1307 04b0 0E94 0000 		call enc28j60WriteOp
 319:../../../../Lib/enc28j60.c **** }
 1309               	.LM147:
 1310 04b4 44E0      		ldi r20,lo8(4)
 1311 04b6 6FE1      		ldi r22,lo8(31)
 1312 04b8 80E8      		ldi r24,lo8(-128)
 1313 04ba 0E94 0000 		call enc28j60WriteOp
 1314               	.LBE17:
 1315               	.LBE16:
  81:../../../../Lib/enc28j60.c ****     enc28j60PhyWrite    (PHLCON, 0x476);
 1317               	.LM148:
 1318 04be 85E0      		ldi r24,lo8(5)
 1319 04c0 90E0      		ldi r25,0
 1320 04c2 0E94 0000 		call vTaskDelay
  82:../../../../Lib/enc28j60.c ****     vTaskDelay          (2);
 1322               	.LM149:
 1323 04c6 66E7      		ldi r22,lo8(118)
 1324 04c8 74E0      		ldi r23,lo8(4)
 1325 04ca 84E1      		ldi r24,lo8(20)
 1326 04cc 0E94 0000 		call enc28j60PhyWrite
  83:../../../../Lib/enc28j60.c **** }
 1328               	.LM150:
 1329 04d0 82E0      		ldi r24,lo8(2)
 1330 04d2 90E0      		ldi r25,0
 1331 04d4 0C94 0000 		jmp vTaskDelay
 1333               	.Lscope15:
 1335               		.stabd	78,0,0
 1338               		.weak	nicGetMacAddress
 1340               	nicGetMacAddress:
 1341               		.stabd	46,0,0
 458:../../../../Lib/enc28j60.c **** 
 459:../../../../Lib/enc28j60.c **** void     nicGetMacAddress(uint8_t* macaddr)
 460:../../../../Lib/enc28j60.c **** {
 1343               	.LM151:
 1344               	.LFBB16:
 1345 04d8 CF93      		push r28
 1346 04da DF93      		push r29
 1347               	/* prologue: function */
 1348               	/* frame size = 0 */
 1349               	/* stack size = 2 */
 1350               	.L__stack_usage = 2
 1351 04dc EC01      		movw r28,r24
 461:../../../../Lib/enc28j60.c ****   macaddr[5] = enc28j60Read(MAADR0);
 1353               	.LM152:
 1354 04de 81EE      		ldi r24,lo8(-31)
 1355 04e0 0E94 0000 		call enc28j60Read
 1356 04e4 8D83      		std Y+5,r24
 462:../../../../Lib/enc28j60.c ****   macaddr[4] = enc28j60Read(MAADR1);
 1358               	.LM153:
 1359 04e6 80EE      		ldi r24,lo8(-32)
 1360 04e8 0E94 0000 		call enc28j60Read
 1361 04ec 8C83      		std Y+4,r24
 463:../../../../Lib/enc28j60.c ****   macaddr[3] = enc28j60Read(MAADR2);
 1363               	.LM154:
 1364 04ee 83EE      		ldi r24,lo8(-29)
 1365 04f0 0E94 0000 		call enc28j60Read
 1366 04f4 8B83      		std Y+3,r24
 464:../../../../Lib/enc28j60.c ****   macaddr[2] = enc28j60Read(MAADR3);
 1368               	.LM155:
 1369 04f6 82EE      		ldi r24,lo8(-30)
 1370 04f8 0E94 0000 		call enc28j60Read
 1371 04fc 8A83      		std Y+2,r24
 465:../../../../Lib/enc28j60.c ****   macaddr[1] = enc28j60Read(MAADR4);
 1373               	.LM156:
 1374 04fe 85EE      		ldi r24,lo8(-27)
 1375 0500 0E94 0000 		call enc28j60Read
 1376 0504 8983      		std Y+1,r24
 466:../../../../Lib/enc28j60.c ****   macaddr[0] = enc28j60Read(MAADR5);
 1378               	.LM157:
 1379 0506 84EE      		ldi r24,lo8(-28)
 1380 0508 0E94 0000 		call enc28j60Read
 1381 050c 8883      		st Y,r24
 1382               	/* epilogue start */
 467:../../../../Lib/enc28j60.c ****   //strncpy((void *)(nicState.mac.addr), (void *)(macaddr), 6);
 468:../../../../Lib/enc28j60.c **** }
 1384               	.LM158:
 1385 050e DF91      		pop r29
 1386 0510 CF91      		pop r28
 1387 0512 0895      		ret
 1389               	.Lscope16:
 1391               		.stabd	78,0,0
 1393               		.weak	nicRegDump
 1395               	nicRegDump:
 1396               		.stabd	46,0,0
 469:../../../../Lib/enc28j60.c **** 
 470:../../../../Lib/enc28j60.c **** void     nicRegDump(FILE *stream)
 471:../../../../Lib/enc28j60.c **** {
 1398               	.LM159:
 1399               	.LFBB17:
 1400 0514 CF93      		push r28
 1401 0516 DF93      		push r29
 1402               	/* prologue: function */
 1403               	/* frame size = 0 */
 1404               	/* stack size = 2 */
 1405               	.L__stack_usage = 2
 1406 0518 EC01      		movw r28,r24
 472:../../../../Lib/enc28j60.c ****   uint8_t temp;
 473:../../../../Lib/enc28j60.c ****   fprintf_P(stream, PSTR("ENC28j60 stan rejestrow:\r\n"));
 1408               	.LM160:
 1409 051a 80E0      		ldi r24,lo8(__c.3546)
 1410 051c 90E0      		ldi r25,hi8(__c.3546)
 1411 051e 9F93      		push r25
 1412 0520 8F93      		push r24
 1413 0522 DF93      		push r29
 1414 0524 CF93      		push r28
 1415 0526 0E94 0000 		call fprintf_P
 474:../../../../Lib/enc28j60.c **** 
 475:../../../../Lib/enc28j60.c ****   temp = enc28j60Read(MAADR0); fprintf_P(stream, PSTR("\tMAADR0 0x%x\r\n"), temp);
 1417               	.LM161:
 1418 052a 81EE      		ldi r24,lo8(-31)
 1419 052c 0E94 0000 		call enc28j60Read
 1420 0530 1F92      		push __zero_reg__
 1421 0532 8F93      		push r24
 1422 0534 80E0      		ldi r24,lo8(__c.3548)
 1423 0536 90E0      		ldi r25,hi8(__c.3548)
 1424 0538 9F93      		push r25
 1425 053a 8F93      		push r24
 1426 053c DF93      		push r29
 1427 053e CF93      		push r28
 1428 0540 0E94 0000 		call fprintf_P
 476:../../../../Lib/enc28j60.c ****   temp = enc28j60Read(MAADR1); fprintf_P(stream, PSTR("\tMAADR1 0x%x\r\n"), temp);
 1430               	.LM162:
 1431 0544 80EE      		ldi r24,lo8(-32)
 1432 0546 0E94 0000 		call enc28j60Read
 1433 054a 1F92      		push __zero_reg__
 1434 054c 8F93      		push r24
 1435 054e 80E0      		ldi r24,lo8(__c.3550)
 1436 0550 90E0      		ldi r25,hi8(__c.3550)
 1437 0552 9F93      		push r25
 1438 0554 8F93      		push r24
 1439 0556 DF93      		push r29
 1440 0558 CF93      		push r28
 1441 055a 0E94 0000 		call fprintf_P
 477:../../../../Lib/enc28j60.c ****   temp = enc28j60Read(MAADR2); fprintf_P(stream, PSTR("\tMAADR2 0x%x\r\n"), temp);
 1443               	.LM163:
 1444 055e 83EE      		ldi r24,lo8(-29)
 1445 0560 0E94 0000 		call enc28j60Read
 1446 0564 1F92      		push __zero_reg__
 1447 0566 8F93      		push r24
 1448 0568 80E0      		ldi r24,lo8(__c.3552)
 1449 056a 90E0      		ldi r25,hi8(__c.3552)
 1450 056c 9F93      		push r25
 1451 056e 8F93      		push r24
 1452 0570 DF93      		push r29
 1453 0572 CF93      		push r28
 1454 0574 0E94 0000 		call fprintf_P
 478:../../../../Lib/enc28j60.c ****   temp = enc28j60Read(MAADR3); fprintf_P(stream, PSTR("\tMAADR3 0x%x\r\n"), temp);
 1456               	.LM164:
 1457 0578 82EE      		ldi r24,lo8(-30)
 1458 057a 0E94 0000 		call enc28j60Read
 1459 057e 1F92      		push __zero_reg__
 1460 0580 8F93      		push r24
 1461 0582 80E0      		ldi r24,lo8(__c.3554)
 1462 0584 90E0      		ldi r25,hi8(__c.3554)
 1463 0586 9F93      		push r25
 1464 0588 8F93      		push r24
 1465 058a DF93      		push r29
 1466 058c CF93      		push r28
 1467 058e 0E94 0000 		call fprintf_P
 479:../../../../Lib/enc28j60.c ****   temp = enc28j60Read(MAADR4); fprintf_P(stream, PSTR("\tMAADR4 0x%x\r\n"), temp);
 1469               	.LM165:
 1470 0592 85EE      		ldi r24,lo8(-27)
 1471 0594 0E94 0000 		call enc28j60Read
 1472 0598 1F92      		push __zero_reg__
 1473 059a 8F93      		push r24
 1474 059c 80E0      		ldi r24,lo8(__c.3556)
 1475 059e 90E0      		ldi r25,hi8(__c.3556)
 1476 05a0 9F93      		push r25
 1477 05a2 8F93      		push r24
 1478 05a4 DF93      		push r29
 1479 05a6 CF93      		push r28
 1480 05a8 0E94 0000 		call fprintf_P
 480:../../../../Lib/enc28j60.c ****   temp = enc28j60Read(MAADR5); fprintf_P(stream, PSTR("\tMAADR5 0x%x\r\n"), temp);
 1482               	.LM166:
 1483 05ac 8DB7      		in r24,__SP_L__
 1484 05ae 9EB7      		in r25,__SP_H__
 1485 05b0 8296      		adiw r24,34
 1486 05b2 0FB6      		in __tmp_reg__,__SREG__
 1487 05b4 F894      		cli
 1488 05b6 9EBF      		out __SP_H__,r25
 1489 05b8 0FBE      		out __SREG__,__tmp_reg__
 1490 05ba 8DBF      		out __SP_L__,r24
 1491 05bc 84EE      		ldi r24,lo8(-28)
 1492 05be 0E94 0000 		call enc28j60Read
 1493 05c2 1F92      		push __zero_reg__
 1494 05c4 8F93      		push r24
 1495 05c6 80E0      		ldi r24,lo8(__c.3558)
 1496 05c8 90E0      		ldi r25,hi8(__c.3558)
 1497 05ca 9F93      		push r25
 1498 05cc 8F93      		push r24
 1499 05ce DF93      		push r29
 1500 05d0 CF93      		push r28
 1501 05d2 0E94 0000 		call fprintf_P
 1502 05d6 0F90      		pop __tmp_reg__
 1503 05d8 0F90      		pop __tmp_reg__
 1504 05da 0F90      		pop __tmp_reg__
 1505 05dc 0F90      		pop __tmp_reg__
 1506 05de 0F90      		pop __tmp_reg__
 1507 05e0 0F90      		pop __tmp_reg__
 1508               	/* epilogue start */
 481:../../../../Lib/enc28j60.c **** }
 1510               	.LM167:
 1511 05e2 DF91      		pop r29
 1512 05e4 CF91      		pop r28
 1513 05e6 0895      		ret
 1515               	.Lscope17:
 1517               		.stabd	78,0,0
 1518               		.section	.progmem.data,"a",@progbits
 1521               	__c.3558:
 1522 0000 094D 4141 		.string	"\tMAADR5 0x%x\r\n"
 1522      4452 3520 
 1522      3078 2578 
 1522      0D0A 00
 1525               	__c.3556:
 1526 000f 094D 4141 		.string	"\tMAADR4 0x%x\r\n"
 1526      4452 3420 
 1526      3078 2578 
 1526      0D0A 00
 1529               	__c.3554:
 1530 001e 094D 4141 		.string	"\tMAADR3 0x%x\r\n"
 1530      4452 3320 
 1530      3078 2578 
 1530      0D0A 00
 1533               	__c.3552:
 1534 002d 094D 4141 		.string	"\tMAADR2 0x%x\r\n"
 1534      4452 3220 
 1534      3078 2578 
 1534      0D0A 00
 1537               	__c.3550:
 1538 003c 094D 4141 		.string	"\tMAADR1 0x%x\r\n"
 1538      4452 3120 
 1538      3078 2578 
 1538      0D0A 00
 1541               	__c.3548:
 1542 004b 094D 4141 		.string	"\tMAADR0 0x%x\r\n"
 1542      4452 3020 
 1542      3078 2578 
 1542      0D0A 00
 1545               	__c.3546:
 1546 005a 454E 4332 		.string	"ENC28j60 stan rejestrow:\r\n"
 1546      386A 3630 
 1546      2073 7461 
 1546      6E20 7265 
 1546      6A65 7374 
 1547               		.local	gNextPacketPtr
 1548               		.comm	gNextPacketPtr,2,1
 1549               		.local	Enc28j60Bank
 1550               		.comm	Enc28j60Bank,1,1
 1551               		.comm	czasRtc,7,1
 1552               		.comm	sockets,2,1
 1553               		.comm	tcpDebugLevel,1,1
 1554               		.comm	tcpDebugStream,2,1
 1555               		.comm	IpMyConfig,15,1
 1556               		.comm	udpDbgLevel,1,1
 1557               		.comm	udpDbgStream,2,1
 1558               		.comm	udpSocket,2,1
 1559               		.comm	icmpDebugLevel,1,1
 1560               		.comm	icmpDebug,2,1
 1561               		.comm	arpDebugLevel,1,1
 1562               		.comm	arpDebug,2,1
 1563               		.comm	nicState,14,1
 1564               		.comm	xSemaphoreRs485,2,1
 1565               		.comm	lockSensors,2,1
 1566               		.comm	portB,1,1
 1567               		.comm	portA,1,1
 1568               		.comm	xSemaphoreSpiSS,2,1
 1569               		.comm	rollers,2,1
 1570               		.comm	wwwport,1,1
 1571               		.comm	klastry,128,1
 1595               		.text
 1597               	.Letext0:
 1598               		.ident	"GCC: (GNU) 4.9.2"
 1599               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 enc28j60.c
     /tmp/ccQF2lF2.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccQF2lF2.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccQF2lF2.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccQF2lF2.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccQF2lF2.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccQF2lF2.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccQF2lF2.s:271    .text:0000000000000000 spiEnableEnc28j60
     /tmp/ccQF2lF2.s:288    .text:0000000000000002 spiDisableEnc28j60
     /tmp/ccQF2lF2.s:307    .text:0000000000000004 enc28j60WriteOp
     /tmp/ccQF2lF2.s:360    .text:000000000000003c enc28j60SetBank
     /tmp/ccQF2lF2.s:1548   .bss:0000000000000002 Enc28j60Bank
     /tmp/ccQF2lF2.s:420    .text:0000000000000080 enc28j60Write
     /tmp/ccQF2lF2.s:463    .text:00000000000000a6 enc28j60ReadOp
     /tmp/ccQF2lF2.s:526    .text:00000000000000e8 enc28j60Read
     /tmp/ccQF2lF2.s:565    .text:0000000000000108 enc28j60PhyWrite
     /tmp/ccQF2lF2.s:627    .text:0000000000000150 enc28j60getrev
     /tmp/ccQF2lF2.s:647    .text:0000000000000156 enc28j60hasRxPkt
     /tmp/ccQF2lF2.s:676    .text:0000000000000168 enc28j60linkup
     /tmp/ccQF2lF2.s:739    .text:00000000000001a4 nicSend
                            *COM*:000000000000000e nicState
     /tmp/ccQF2lF2.s:876    .text:0000000000000252 nicPoll
                             .bss:0000000000000000 gNextPacketPtr
     /tmp/ccQF2lF2.s:1079   .text:000000000000037a nicSetMacAddress
     /tmp/ccQF2lF2.s:1135   .text:00000000000003b4 nicMacInit
     /tmp/ccQF2lF2.s:1340   .text:00000000000004d8 nicGetMacAddress
     /tmp/ccQF2lF2.s:1395   .text:0000000000000514 nicRegDump
     /tmp/ccQF2lF2.s:1545   .progmem.data:000000000000005a __c.3546
     /tmp/ccQF2lF2.s:1541   .progmem.data:000000000000004b __c.3548
     /tmp/ccQF2lF2.s:1537   .progmem.data:000000000000003c __c.3550
     /tmp/ccQF2lF2.s:1533   .progmem.data:000000000000002d __c.3552
     /tmp/ccQF2lF2.s:1529   .progmem.data:000000000000001e __c.3554
     /tmp/ccQF2lF2.s:1525   .progmem.data:000000000000000f __c.3556
     /tmp/ccQF2lF2.s:1521   .progmem.data:0000000000000000 __c.3558
                            *COM*:0000000000000007 czasRtc
                            *COM*:0000000000000002 sockets
                            *COM*:0000000000000001 tcpDebugLevel
                            *COM*:0000000000000002 tcpDebugStream
                            *COM*:000000000000000f IpMyConfig
                            *COM*:0000000000000001 udpDbgLevel
                            *COM*:0000000000000002 udpDbgStream
                            *COM*:0000000000000002 udpSocket
                            *COM*:0000000000000001 icmpDebugLevel
                            *COM*:0000000000000002 icmpDebug
                            *COM*:0000000000000001 arpDebugLevel
                            *COM*:0000000000000002 arpDebug
                            *COM*:0000000000000002 xSemaphoreRs485
                            *COM*:0000000000000002 lockSensors
                            *COM*:0000000000000001 portB
                            *COM*:0000000000000001 portA
                            *COM*:0000000000000002 xSemaphoreSpiSS
                            *COM*:0000000000000002 rollers
                            *COM*:0000000000000001 wwwport
                            *COM*:0000000000000080 klastry

UNDEFINED SYMBOLS
spiSendENC
vTaskDelay
fprintf_P
__do_clear_bss
